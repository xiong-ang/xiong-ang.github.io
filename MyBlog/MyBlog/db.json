{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/timg.jpg","path":"images/timg.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"08c249267316702ef651cb561c19b9b2618be65b","modified":1508661763724},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"source/_posts/2017.10.22.md","hash":"1871cee9839c4292c90100dfbfe7e844523c12f1","modified":1508761608124},{"_id":"source/_posts/DesignPattern.md","hash":"fd63460288dddc4505016bbfd84af22600e37e04","modified":1510924682859},{"_id":"source/_posts/ExceptionProcessor.md","hash":"7e4acc978acf854bfccc9e83ec51ad46aab0b668","modified":1510401606492},{"_id":"source/_posts/LinuxBase.md","hash":"8d00c01ffd9c0f5c8c9252522c22eff603e62954","modified":1511066672313},{"_id":"source/_posts/StrongName.md","hash":"99e54e9b1a3d047c4a93abf4e9017def597eace1","modified":1510543920655},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"source/_posts/dragdrop.md","hash":"eb8b534a27b2584643c664d9ced3bff6c53b61c1","modified":1509855309457},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501628194000},{"_id":"source/_posts/wpf-mvvm.md","hash":"cb1b9fa55eb14de9670e136049d88ed554559991","modified":1510404893548},{"_id":"source/_posts/log4net.md","hash":"48d6eb194fa93ba08624857b922650be6485fdc0","modified":1510404920552},{"_id":"source/categories/index.md","hash":"ad827ccea57c6cff5fe2f67ec4c5f414a86144bf","modified":1508662056720},{"_id":"source/tags/index.md","hash":"45672191966a582e712cc998b0e97e195f230ad5","modified":1508662080817},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501628194000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501628194000},{"_id":"source/_posts/goal.md","hash":"77488a725f8c8fbd6fb53b526e1ed8c81f54b20d","modified":1509452662307},{"_id":"source/_posts/Controller.md","hash":"2a50fa7b027797ffc0672f6a6d40ae9d1a01b378","modified":1509859537726},{"_id":"source/_posts/clipboard.md","hash":"92c9bb6439e38a402b553a9d8cc9cba89360011b","modified":1509855939091},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501628194000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501628194000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501628194000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"themes/next/source/images/timg.jpg","hash":"67f911a404c9f766e9c9adeb2c3c8a1544df711c","modified":1508658958004},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000},{"_id":"public/categories/index.html","hash":"97b31acd9edb6114c0ad1f0e6e9008630ac65efd","modified":1511066743716},{"_id":"public/tags/index.html","hash":"8a5fbdc67f4c632d879bf7b7455241c932e35ef6","modified":1511066743731},{"_id":"public/2017/11/13/StrongName/index.html","hash":"c7f968716642117d9c4c2cc2c6e6526b9cebbc3f","modified":1511066743732},{"_id":"public/2017/11/11/log4net/index.html","hash":"c6b611142479bad78612cec87cad40a563a77f84","modified":1511066743732},{"_id":"public/2017/11/11/wpf-mvvm/index.html","hash":"6736100900ad8c4fe4c6627cb5d2fd9a99b24b03","modified":1511066743732},{"_id":"public/archives/2017/10/index.html","hash":"8a0e8ae572f5398bc0be2fc991d0f8d396c82dab","modified":1511066743732},{"_id":"public/archives/2017/11/index.html","hash":"d488ad522a7580376e428eec5b96d9ea2aefe8de","modified":1511066743732},{"_id":"public/source/categories/CI/index.html","hash":"1536a7d697901204ffabfb1f904c32381c449cef","modified":1511066743732},{"_id":"public/source/categories/Design-Pattern/index.html","hash":"1a4a0f3fdfabeb8fd62f459778032a91abc9ef65","modified":1511066743732},{"_id":"public/source/categories/C/index.html","hash":"ab4c780a32e886336fa53967a4e7b07298a45120","modified":1511066743733},{"_id":"public/source/categories/Product/index.html","hash":"c7a4c803a706baa7e364ac7ff3ae72772919dc2d","modified":1511066743733},{"_id":"public/source/tags/Code-Coverage/index.html","hash":"3deac640bba2ec0979ebdd813ba8d5749253302f","modified":1511066743733},{"_id":"public/source/tags/CI/index.html","hash":"85068b344ad71da22bff1b30ea9c254cbc635d21","modified":1511066743733},{"_id":"public/source/tags/Design-Pattern/index.html","hash":"7a52d2320c661446ffcf4799bae5576a800c3778","modified":1511066743733},{"_id":"public/source/tags/UML/index.html","hash":"baa5bd55f9216d92a664ee7d789ed1c0aeb701f5","modified":1511066743733},{"_id":"public/source/tags/Exception/index.html","hash":"ded62c95a81ac6ccabdc4f11c21b45c87d7866d4","modified":1511066743734},{"_id":"public/source/tags/C/index.html","hash":"fc7b41f1950b71193128b3eadd8a4f5c0038997b","modified":1511066743734},{"_id":"public/source/tags/DragDrop/index.html","hash":"15b9ca68e2fdd0a79a050e8e492deb3e77574d58","modified":1511066743734},{"_id":"public/source/tags/goal/index.html","hash":"3b64ddf991aaed2728d98f8e746e893c3842bf1c","modified":1511066743734},{"_id":"public/source/tags/Controller/index.html","hash":"9e81d60b06345399ead72b4e08fcf112f39c5782","modified":1511066743734},{"_id":"public/source/tags/Clipboard/index.html","hash":"a3ed32c9b4eca8a96fe95b60f0570ddfab935666","modified":1511066743735},{"_id":"public/2017/11/11/ExceptionProcessor/index.html","hash":"cb3ea2f3126ebe104c52bdb0aa63b0df6f9dbda4","modified":1511066743735},{"_id":"public/2017/11/05/DesignPattern/index.html","hash":"f5f9eed227db9a86c06a4ad386a2f3eb04f68a26","modified":1511066743736},{"_id":"public/2017/11/05/Controller/index.html","hash":"d3db3598979bd5905b78d463b38e7790e3dee3ad","modified":1511066743736},{"_id":"public/2017/10/31/goal/index.html","hash":"5fca0ad0b7b6960cefb90c5c855330d5c9477c16","modified":1511066743737},{"_id":"public/2017/10/29/dragdrop/index.html","hash":"c69dcbad67df3f3bcd67faafe9e7075b9e550248","modified":1511066743737},{"_id":"public/2017/10/29/clipboard/index.html","hash":"fd23417b01606d0d956838d76bc288cf8e37eb14","modified":1511066743737},{"_id":"public/2017/10/22/2017.10.22/index.html","hash":"fe850c1da7daa1d5f9581340aacdefa090fb6b31","modified":1511066743740},{"_id":"public/archives/index.html","hash":"b5a35c7fda25cec02f517269726ee8851024f96e","modified":1511066743741},{"_id":"public/archives/2017/index.html","hash":"647d83bbac6d9f9503b6496a049cc08859b52b7f","modified":1511066743741},{"_id":"public/index.html","hash":"96d70481c108dffa0f68696578de12bc690491f4","modified":1511066743741},{"_id":"public/archives/page/2/index.html","hash":"6365c1785723c8cd622d5ec8f876d2acbe0dc6ee","modified":1511066743821},{"_id":"public/archives/2017/page/2/index.html","hash":"e1b2ee177670c8317d36cd736309009ba8bf5860","modified":1511066743821},{"_id":"public/source/categories/Linux/index.html","hash":"6645b937be36a11441e192ebef08158a40b27718","modified":1511066743821},{"_id":"public/page/2/index.html","hash":"8772d78d4f317fc303a81e61f64805d765c8d311","modified":1511066743822},{"_id":"public/source/tags/Linux/index.html","hash":"c24c6751f987923df2f6c5d8302d4aec42fcb451","modified":1511066743822},{"_id":"public/2017/11/19/LinuxBase/index.html","hash":"110a3c456a15f9d5c394d6f1b0accd25ca11d6b0","modified":1511066743822},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511066743844},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1511066743844},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1511066743844},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1511066743844},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1511066743844},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1511066743844},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1511066743844},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511066743844},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511066743845},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1511066743845},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1511066743845},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1511066743845},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1511066743845},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511066743845},{"_id":"public/images/timg.jpg","hash":"67f911a404c9f766e9c9adeb2c3c8a1544df711c","modified":1511066743845},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1511066743846},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1511066743846},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511066743846},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511066743846},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511066743846},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511066743846},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511066743846},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511066743846},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1511066743846},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1511066743846},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1511066743846},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1511066743847},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1511066743848},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511066743848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511066782384},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511066782415},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1511066782477},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1511066782477},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1511066782478},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1511066782478},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1511066782478},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1511066782479},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1511066782479},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1511066782479},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1511066782479},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1511066782479},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1511066782479},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1511066782479},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1511066782479},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1511066782479},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1511066782479},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1511066782479},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1511066782479},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1511066782480},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1511066782480},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1511066782480},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1511066782480},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1511066782480},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1511066782481},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1511066782481},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1511066782481},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1511066782481},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1511066782481},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1511066782481},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1511066782481},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1511066782482},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1511066782482},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1511066782482},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511066782482},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1511066782482},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1511066782482},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1511066782482},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1511066782482},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1511066782482},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1511066782482},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1511066782483},{"_id":"public/css/main.css","hash":"9372600a48f939ada3f64634337090a82c0e6d06","modified":1511066782483},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1511066782483},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1511066782483},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1511066782483},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1511066782483},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1511066782483},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1511066782483},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1511066782483},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1511066782483},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1511066782484},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1511066782484},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1511066782484},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1511066782484},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1511066782485},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1511066782485},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1511066782487},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1511066782487},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1511066782488},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1511066782489},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511066782489},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511066782489},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511066782490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1511066782899}],"Category":[{"name":"CI","_id":"cja6a3v3d0004tkui12bdejwu"},{"name":"Design Pattern","_id":"cja6a3v3z0009tkui7qfadndv"},{"name":"C#","_id":"cja6a3v49000etkui21004da2"},{"name":"Linux","_id":"cja6a3v4h000ltkuii2o1wppp"},{"name":"Product","_id":"cja6a3v4q000utkuikbcl8rwl"}],"Data":[],"Page":[{"title":"分类","date":"2016-11-15T11:11:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-11-15 19:11:13\ntype: \"categories\"\n---","updated":"2017-10-22T08:47:36.720Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cja6a3v320001tkuip4dzb048","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-11-15T11:11:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-11-15 19:11:13\ntype: \"tags\"\n---","updated":"2017-10-22T08:48:00.817Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cja6a3v3a0003tkui5wqwe6c1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"如何自动化分析代码覆盖率(How to Use the Code Coverage Analysis Tool)","date":"2017-10-22T05:36:10.000Z","_content":"\n> 由于项目CI方面需求，前段时间学习和使用了微软的代码覆盖率（Code Coverage）分析工具，当时着手做时，发现网上资料非常欠缺，遇到了不少坑，在此做个总结，希望能帮到有这方面需求的人。\n\n**Code Coverage**，代码覆盖率，是CI的需求一部分。微软VS ultimate版本提供了测试Code Coverage的选项，也提供了相应的命令行工具。\n\n## 使用微软命令行工具分析Code Coverage\n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/codecoverage.PNG?raw=true)\n\n1. Instrument，可以理解为配备或准备的意思，这一步使用的工具Vsinstr.exe，它需要将被测程序集名称作为参数，主要作用是将需要测量的程序集分块，并插入监听程序，在这个工程中，需要程序集对应的PDB文件。\n2. 开启监听，并收集覆盖率。这一步用到的工具是Vsperfcmd.exe，它会开启一个监听程序Vsperfmon.exe,当Instrumented的程序集被覆盖到时，会Vsperfmon.exe会收到通知。\n3. 运行测试用例。\n4. 使用Vsperfcmd，输入与上面不同的参数，停止监听，生成Code Coverage报告。\n\n## 遵循这四步的Workflow\n1. 首先安装需要分析Code Coverage的产品\n2. 将PDB拷贝到程序集所在的目录，这里需要注意的是，我们需要分析Code Coverage的程序集有可能并不是都在一个目录，这时，需要我们将PDB文件拷贝到多个地方。\n3. 编写脚本\n\n>* Instrumt \n```\nVsinstr -coverage <myprojectbinary  the dll/exe>\n...\nVsinstr -coverage <myprojectbinary the dll/exe>\n```\n\n>* 开始脚本\n```\nVSPerfCmd.exe /start:coverage /output:\"*.Coverage\"\n或\nStart vsperfmon -coverage -output:mytestrun.coverage\n```\n\n>* 结束脚本\n```\nvsperfcmd –shutdown\n```\n\n4. 运行开始脚本，这一步做的是Instrumt,并且开始监控\n5. 运行测试用例\n6. 运行结束脚本，这一步的作用是结束监听，并且生成报告\n\n## 最后值得注意的事项\n1. 在分析Code Coverage的过程中，后台会启动一个VSPerfMon.exed的进程，用于收集Code Coverage信息，只要这个进程结束，收集会终止，所以在这个过程中，关机或者手动关闭这个进程，都会影响分析结果的准确性。\n2. 得到的*.coverage文件是与Instrumented的程序集以及PDB文件相关联的，如果需要保存和转移，微软官网给我们的建议是通过VS转换成XML格式。\n3. Instrument过程中需要程序集的名字作为参数，这意味着，如果我们项目工程增多了，需要对新增加的程序集进行分析，就需要修改脚本。\n4. 第四点值得开发人员注意，微软根据Block的概念计算Code Coverage，而Block的概念是与Instrumented 程序集中的CIL对应的，并不是我们实际的Code，所以我们如果我们从Code文本出发来理解VS中Code Coverage百分比时，往往会比较迷惑。实际上，我们也没有必要这样去做。\n5. Last but not least, 最权威的资料: [https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx]\n\n> 本文作者--Barret Xiong--\n> 转载请注明出处！","source":"_posts/2017.10.22.md","raw":"---\ntitle: 如何自动化分析代码覆盖率(How to Use the Code Coverage Analysis Tool)\ndate: 2017-10-22 13:36:10\ncategories: CI\ntags: [Code Coverage, CI]\n---\n\n> 由于项目CI方面需求，前段时间学习和使用了微软的代码覆盖率（Code Coverage）分析工具，当时着手做时，发现网上资料非常欠缺，遇到了不少坑，在此做个总结，希望能帮到有这方面需求的人。\n\n**Code Coverage**，代码覆盖率，是CI的需求一部分。微软VS ultimate版本提供了测试Code Coverage的选项，也提供了相应的命令行工具。\n\n## 使用微软命令行工具分析Code Coverage\n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/codecoverage.PNG?raw=true)\n\n1. Instrument，可以理解为配备或准备的意思，这一步使用的工具Vsinstr.exe，它需要将被测程序集名称作为参数，主要作用是将需要测量的程序集分块，并插入监听程序，在这个工程中，需要程序集对应的PDB文件。\n2. 开启监听，并收集覆盖率。这一步用到的工具是Vsperfcmd.exe，它会开启一个监听程序Vsperfmon.exe,当Instrumented的程序集被覆盖到时，会Vsperfmon.exe会收到通知。\n3. 运行测试用例。\n4. 使用Vsperfcmd，输入与上面不同的参数，停止监听，生成Code Coverage报告。\n\n## 遵循这四步的Workflow\n1. 首先安装需要分析Code Coverage的产品\n2. 将PDB拷贝到程序集所在的目录，这里需要注意的是，我们需要分析Code Coverage的程序集有可能并不是都在一个目录，这时，需要我们将PDB文件拷贝到多个地方。\n3. 编写脚本\n\n>* Instrumt \n```\nVsinstr -coverage <myprojectbinary  the dll/exe>\n...\nVsinstr -coverage <myprojectbinary the dll/exe>\n```\n\n>* 开始脚本\n```\nVSPerfCmd.exe /start:coverage /output:\"*.Coverage\"\n或\nStart vsperfmon -coverage -output:mytestrun.coverage\n```\n\n>* 结束脚本\n```\nvsperfcmd –shutdown\n```\n\n4. 运行开始脚本，这一步做的是Instrumt,并且开始监控\n5. 运行测试用例\n6. 运行结束脚本，这一步的作用是结束监听，并且生成报告\n\n## 最后值得注意的事项\n1. 在分析Code Coverage的过程中，后台会启动一个VSPerfMon.exed的进程，用于收集Code Coverage信息，只要这个进程结束，收集会终止，所以在这个过程中，关机或者手动关闭这个进程，都会影响分析结果的准确性。\n2. 得到的*.coverage文件是与Instrumented的程序集以及PDB文件相关联的，如果需要保存和转移，微软官网给我们的建议是通过VS转换成XML格式。\n3. Instrument过程中需要程序集的名字作为参数，这意味着，如果我们项目工程增多了，需要对新增加的程序集进行分析，就需要修改脚本。\n4. 第四点值得开发人员注意，微软根据Block的概念计算Code Coverage，而Block的概念是与Instrumented 程序集中的CIL对应的，并不是我们实际的Code，所以我们如果我们从Code文本出发来理解VS中Code Coverage百分比时，往往会比较迷惑。实际上，我们也没有必要这样去做。\n5. Last but not least, 最权威的资料: [https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx]\n\n> 本文作者--Barret Xiong--\n> 转载请注明出处！","slug":"2017.10.22","published":1,"updated":"2017-10-23T12:26:48.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v2t0000tkuis97dw9io","content":"<blockquote>\n<p>由于项目CI方面需求，前段时间学习和使用了微软的代码覆盖率（Code Coverage）分析工具，当时着手做时，发现网上资料非常欠缺，遇到了不少坑，在此做个总结，希望能帮到有这方面需求的人。</p>\n</blockquote>\n<p><strong>Code Coverage</strong>，代码覆盖率，是CI的需求一部分。微软VS ultimate版本提供了测试Code Coverage的选项，也提供了相应的命令行工具。</p>\n<h2 id=\"使用微软命令行工具分析Code-Coverage\"><a href=\"#使用微软命令行工具分析Code-Coverage\" class=\"headerlink\" title=\"使用微软命令行工具分析Code Coverage\"></a>使用微软命令行工具分析Code Coverage</h2><p><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/codecoverage.PNG?raw=true\" alt=\"\"></p>\n<ol>\n<li>Instrument，可以理解为配备或准备的意思，这一步使用的工具Vsinstr.exe，它需要将被测程序集名称作为参数，主要作用是将需要测量的程序集分块，并插入监听程序，在这个工程中，需要程序集对应的PDB文件。</li>\n<li>开启监听，并收集覆盖率。这一步用到的工具是Vsperfcmd.exe，它会开启一个监听程序Vsperfmon.exe,当Instrumented的程序集被覆盖到时，会Vsperfmon.exe会收到通知。</li>\n<li>运行测试用例。</li>\n<li>使用Vsperfcmd，输入与上面不同的参数，停止监听，生成Code Coverage报告。</li>\n</ol>\n<h2 id=\"遵循这四步的Workflow\"><a href=\"#遵循这四步的Workflow\" class=\"headerlink\" title=\"遵循这四步的Workflow\"></a>遵循这四步的Workflow</h2><ol>\n<li>首先安装需要分析Code Coverage的产品</li>\n<li>将PDB拷贝到程序集所在的目录，这里需要注意的是，我们需要分析Code Coverage的程序集有可能并不是都在一个目录，这时，需要我们将PDB文件拷贝到多个地方。</li>\n<li>编写脚本</li>\n</ol>\n<blockquote>\n<ul>\n<li><p>Instrumt </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vsinstr -coverage &lt;myprojectbinary  the dll/exe&gt;</div><div class=\"line\">...</div><div class=\"line\">Vsinstr -coverage &lt;myprojectbinary the dll/exe&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>开始脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">VSPerfCmd.exe /start:coverage /output:&quot;*.Coverage&quot;</div><div class=\"line\">或</div><div class=\"line\">Start vsperfmon -coverage -output:mytestrun.coverage</div></pre></td></tr></table></figure>\n</li>\n<li><p>结束脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vsperfcmd –shutdown</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ol>\n<li>运行开始脚本，这一步做的是Instrumt,并且开始监控</li>\n<li>运行测试用例</li>\n<li>运行结束脚本，这一步的作用是结束监听，并且生成报告</li>\n</ol>\n<h2 id=\"最后值得注意的事项\"><a href=\"#最后值得注意的事项\" class=\"headerlink\" title=\"最后值得注意的事项\"></a>最后值得注意的事项</h2><ol>\n<li>在分析Code Coverage的过程中，后台会启动一个VSPerfMon.exed的进程，用于收集Code Coverage信息，只要这个进程结束，收集会终止，所以在这个过程中，关机或者手动关闭这个进程，都会影响分析结果的准确性。</li>\n<li>得到的*.coverage文件是与Instrumented的程序集以及PDB文件相关联的，如果需要保存和转移，微软官网给我们的建议是通过VS转换成XML格式。</li>\n<li>Instrument过程中需要程序集的名字作为参数，这意味着，如果我们项目工程增多了，需要对新增加的程序集进行分析，就需要修改脚本。</li>\n<li>第四点值得开发人员注意，微软根据Block的概念计算Code Coverage，而Block的概念是与Instrumented 程序集中的CIL对应的，并不是我们实际的Code，所以我们如果我们从Code文本出发来理解VS中Code Coverage百分比时，往往会比较迷惑。实际上，我们也没有必要这样去做。</li>\n<li>Last but not least, 最权威的资料: [<a href=\"https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx</a>]</li>\n</ol>\n<blockquote>\n<p>本文作者–Barret Xiong–<br>转载请注明出处！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>由于项目CI方面需求，前段时间学习和使用了微软的代码覆盖率（Code Coverage）分析工具，当时着手做时，发现网上资料非常欠缺，遇到了不少坑，在此做个总结，希望能帮到有这方面需求的人。</p>\n</blockquote>\n<p><strong>Code Coverage</strong>，代码覆盖率，是CI的需求一部分。微软VS ultimate版本提供了测试Code Coverage的选项，也提供了相应的命令行工具。</p>\n<h2 id=\"使用微软命令行工具分析Code-Coverage\"><a href=\"#使用微软命令行工具分析Code-Coverage\" class=\"headerlink\" title=\"使用微软命令行工具分析Code Coverage\"></a>使用微软命令行工具分析Code Coverage</h2><p><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/codecoverage.PNG?raw=true\" alt=\"\"></p>\n<ol>\n<li>Instrument，可以理解为配备或准备的意思，这一步使用的工具Vsinstr.exe，它需要将被测程序集名称作为参数，主要作用是将需要测量的程序集分块，并插入监听程序，在这个工程中，需要程序集对应的PDB文件。</li>\n<li>开启监听，并收集覆盖率。这一步用到的工具是Vsperfcmd.exe，它会开启一个监听程序Vsperfmon.exe,当Instrumented的程序集被覆盖到时，会Vsperfmon.exe会收到通知。</li>\n<li>运行测试用例。</li>\n<li>使用Vsperfcmd，输入与上面不同的参数，停止监听，生成Code Coverage报告。</li>\n</ol>\n<h2 id=\"遵循这四步的Workflow\"><a href=\"#遵循这四步的Workflow\" class=\"headerlink\" title=\"遵循这四步的Workflow\"></a>遵循这四步的Workflow</h2><ol>\n<li>首先安装需要分析Code Coverage的产品</li>\n<li>将PDB拷贝到程序集所在的目录，这里需要注意的是，我们需要分析Code Coverage的程序集有可能并不是都在一个目录，这时，需要我们将PDB文件拷贝到多个地方。</li>\n<li>编写脚本</li>\n</ol>\n<blockquote>\n<ul>\n<li><p>Instrumt </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vsinstr -coverage &lt;myprojectbinary  the dll/exe&gt;</div><div class=\"line\">...</div><div class=\"line\">Vsinstr -coverage &lt;myprojectbinary the dll/exe&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>开始脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">VSPerfCmd.exe /start:coverage /output:&quot;*.Coverage&quot;</div><div class=\"line\">或</div><div class=\"line\">Start vsperfmon -coverage -output:mytestrun.coverage</div></pre></td></tr></table></figure>\n</li>\n<li><p>结束脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vsperfcmd –shutdown</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ol>\n<li>运行开始脚本，这一步做的是Instrumt,并且开始监控</li>\n<li>运行测试用例</li>\n<li>运行结束脚本，这一步的作用是结束监听，并且生成报告</li>\n</ol>\n<h2 id=\"最后值得注意的事项\"><a href=\"#最后值得注意的事项\" class=\"headerlink\" title=\"最后值得注意的事项\"></a>最后值得注意的事项</h2><ol>\n<li>在分析Code Coverage的过程中，后台会启动一个VSPerfMon.exed的进程，用于收集Code Coverage信息，只要这个进程结束，收集会终止，所以在这个过程中，关机或者手动关闭这个进程，都会影响分析结果的准确性。</li>\n<li>得到的*.coverage文件是与Instrumented的程序集以及PDB文件相关联的，如果需要保存和转移，微软官网给我们的建议是通过VS转换成XML格式。</li>\n<li>Instrument过程中需要程序集的名字作为参数，这意味着，如果我们项目工程增多了，需要对新增加的程序集进行分析，就需要修改脚本。</li>\n<li>第四点值得开发人员注意，微软根据Block的概念计算Code Coverage，而Block的概念是与Instrumented 程序集中的CIL对应的，并不是我们实际的Code，所以我们如果我们从Code文本出发来理解VS中Code Coverage百分比时，往往会比较迷惑。实际上，我们也没有必要这样去做。</li>\n<li>Last but not least, 最权威的资料: [<a href=\"https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/library/dd299398(v=vs.90).aspx</a>]</li>\n</ol>\n<blockquote>\n<p>本文作者–Barret Xiong–<br>转载请注明出处！</p>\n</blockquote>\n"},{"title":"设计模式(Design Pattern)","date":"2017-11-05T13:26:11.000Z","_content":"#  面向对象软件开发简介     \n* **结构化程序设计面临的一些问题**       \n1.  程序各部分承担责任不平衡，“主”程序承受的责任太多，容易产生非常复杂的代码。     \n2.  “主”程序需要关注太多的细节，对需求的变化，十分无力。     \n* **理解对象**    \n> 概念--什么责任；规约--怎么用；实现--怎么做到的    \n1. 在概念层次上，对象是一组责任       \n2. 在规约层次上，对象是一组可以被其它对象或自己调用的方法        \n3. 在实现层次上，对象是代码和数据，以及它们之间的计算交互        \n\n#  UML 统一建模语言\n* **UML图类型**     \n1. 用例图-->分析阶段      \n2. 交互图-->观察对象交互      \n3. 类图-->设计阶段     \n4. 状态图-->观察对象状态与行为        \n5. 部署图-->配置阶段      \n* **类之间关系**         \n1. 泛化(Generalization)--> is-a     \n2. 实现(Realization)--> 实现接口     \n3. 依赖(Dependency)--> 一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系      \n4. 关联(Association)--> 包括：聚合(Aggregation)、组合(Composition)     \n    > 聚合和组合的区别在于：聚合关系是“has-a”关系，组合关系是“contains-a”关系；聚合关系表示整体与部分的关系比较弱，而组合比较强；聚合关系中代表部分事物的对象与代表聚合事物的对象的生存期无关，一旦删除了聚合对象不一定就删除了代表部分事物的对象。组合中一旦删除了组合对象，同时也就删除了代表部分事物的对象。[更多参考](http://www.uml.org.cn/oobject/201104212.asp)        \n\n5. 多重性(Multiplicity)--> 通常在关联中使用。就是代表有多少个关联对象存在。       \n\n#  传统面向对象设计的局限       \n> 传统面向对象设计：特化和复用           \n> 传统面向对象设计奖一切作为特例来解决问题。这种解决方案直截了当。但是有几个缺点：高冗余、低内聚和类爆炸。       \n\n# 设计模式      \n* **面向对象设计的一些策略**           \n1. 按接口编程        \n2. 尽量用聚合代替继承             \n3. 找出变化并封装               \n* **Facade模式**              \n> **定义：** 为子系统中的一组接口提供一个统一接口。      \n> **意图：** 希望简化原有系统的使用方式，定义自己的接口。       \n> **问题：** 只需要摸个复杂系统的子集，或者需要以一种特殊的方式与系统交互。         \n> **解决方案：** Facade为原有系统的客户提供一个新的接口。        \n> **效果：** Facade模式简化了对所需子系统的使用过程。但是由于Facade并不完整，因此客户可能无法使用某些功能。        \n> **实现：** 定义一个或多个具备所需接口的新类。      \n> **举例：** 比如某产品中对Service的单例封装。    \n> **应用：** 1.简化复杂系统；2.封装或隐藏原系统；3.希望在原系统基础上增加一些新的功能。          \n\n* **Adapter模式**          \n> **定义：** 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。       \n> **意图：** 使控制范围之外的一个原有对象与某个接口匹配。        \n> **问题：** 系统的数据和行为都正确，但是接口不符。通常用于必须从抽象类派生使。           \n> **解决方案：** Adapter模式提供了具有所需接口的包装类。           \n> **参与者与协作者：** Adapter改变了Adaptee的接口，使Adaptee与Adapter的基类Target匹配。这样Client就可以使用Adaptee了，就好像它是Target。                 \n> **效果：** Adapter模式使原有对象能够适应新的类结构，不受其他接口的限制。            \n> **实现：** 将原有类包含在另一个类之中。让包含类与需要的接口匹配，调用被包含类的方法。           \n> **类型：** 对象Adapter模式(组合)；类Adapter模式(继承)。       \n> **与Facade的异同：** Facade模式简化了接口，而Adapter模式将一个已有的接口转换成另一个接口。             \n\n* **开拓视野**        \n> **软件设计思路：** 功能分隔-->定义接口-->实现接口(关注动机而非实现)。                \n> **理解封装:** 任何形式的隐藏，可是是数据、实现细节、派生类、设计细节、实例化规则。比如：通过抽象类或接口隐藏类。                 \n> **使用继承来特化的问题：** 1.可能导致弱内聚；2.减少复用的可能性；3.无法根据变化很好地伸缩。             \n> **发现变化并将其封装**         \n> **共性和可变性分析：** 共性分析寻找的是不可能随时间而变化的结构，而可变性分析则要找到可能变化的结构。可变性分析只在共性分析定义的上下文中才有意义。从架构的角度来看，共性分析为架构提供长效的要素，而可变性分析则促成它适应实际使用的需求。更具体的了解：抽象类（共性）、派生类（可变性）。              \n> **敏捷编程的品质：** 极限编程的核心是循序渐进的开发，在编程的同时进行验证。大的概念是从众多小的概念演化而来的。敏捷的品质：1.无冗余；2.可读；3.可测试。      \n> **测试驱动开发TDD的优势：** 1.最后能够得到一组自动化测试。2.必须按方法的接口而非实现来设计，这样得到封装更好、耦合更松散的方法。3.关注测试会让你注意到概念费城多个可测试的部分，这样能够获得强内聚和松耦合。             \n\n* **Strategy模式**                \n> **定义：** 定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。Strategy模式使算法可以独立于使用它的客户变化。       \n> **意图：** 可以根据上下文，使用不同的业务规则或算法。       \n> **问题：** 对所需算法的选择取决于发出请求的客户或者要处理的数据。如果只有一些不会变化的算法，就不需要Strategy模式。        \n> **解决方案：** 将对算法的选择和算法的实现分离。允许根据上下文进行选择。        \n> **参与者与协作者：** 1.Strategy指定了如果有使用不同的算法；2.各ConcreteStrategy实现了这些不同的算法；3.Context根据类型为Strategy的引用使用具体的ConcreteStrategy。         \n> **效果：** 1.Strategy模式定义了一系列算法；2.可以不使用switch语句或条件语句；3.必须以相同的方式调用所有的算法。      \n> **实现：** 让使用算法的类Context包含一个抽象类Strategy，该抽象类有一个抽象的方法指定如何调用短发。每个派生类按需要实现算法。    \n> **扩展：** C++函数指针和C#委托都可以维持一个无状态的Strategy。        \n\n* **Bridge模式**               \n> **定义：** 将抽象与其实现解耦，使它们可以独立地变化。       \n> **意图：** 将一组实现与另一组使用它们的对象分离。        \n> **问题：** 一个抽象类的派生类必须使用多个实现，但不能出现类数量的爆炸性增长。      \n> **解决方案：** 为所有实现定义一个接口，供抽象类的所有派生类使用。     \n> **参与者与协作者：** Abstraction为要实现的对象定义接口，Implementor为具体的实现定义接口。Abstraction派生类使用Implementor的派生类，却无需知道自己具体使用哪一个ConcreteImplementor。     \n> **效果：** 实现与使用实现的对象解耦，提供了可扩展性，客户对象无需操心实现问题。      \n> **实现：** 1.将实现封装在一个抽象类中；2.在要实现的抽象的基类中包含一个实现的句柄。        \n> **应用举例：** 打印机驱动程序，驱动程序打印不同种类的对象(抽象)与使用的打印机(实现)可以解耦。          \n\n* **AbstractFactory模式**              \n> **定义：** 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。      \n> **意图：** 需要为特定的客户(或情况)提供对象组。     \n> **问题：** 需要实例化一组相关的对象。         \n> **解决方案：** 协调对象组的创建。提供一种方式，将如何执行对象实例化的规则从使用这些对象的客户对象提取出来。           \n> **参与者与协作者：** AbstractFactory为如何创建对象组的每个成员定义接口。一般每个组都由独立的ConcreteFactory进行创建。      \n> **效果：** 这个模式将“使用那些对象”的规则与“如何使用这些对象”的逻辑分离开来，重新划分了类的责任。              \n> **实现：** 定义一个抽象类来指定创建那些对象。然后为每个组实现一个具体类。              \n\n# 模式组合      \n\n* **专家设计之道**                  \n> Alexander描述了一种基于模式的方法：1.从对整体的概念性理解开始，以理解需求实现的目标；2.找到在整体中出现的模式；3.从为其他模式创建背景的那些模式开始；4.从背景向内，应用这些模式，找到新模式，并重复；5.最后，通过每次应用一个模式，改进设计，并在所创建的背景中予以实现。                 \n\n* **用模式思考**             \n> 1. **找出模式**。在问题领域中找出模式。           \n> 2. **分析和应用模式**。对于要进行分析的模式集合，执2a到2d。        \n2a. **按背景的创造顺序将模式排序**。根据为其他模式创造背景的情况将模式排序。其原理是，一个模式将为另一个模式的创造背景，不会出现两个模式互为彼此创建背景的情况。    \n2b. **选择模式并扩展设计**。根据排序，选择列表中的下一个模式，用它得到高层的概念设计。       \n2c. **找到其他模式**。找到在分析中可能出现的其他模式，将它们添加到要分析的模式集合中。             \n2d. **重复**。对没有融合概念设计的模式重复以上步骤。         \n> 3. **添加细节**。根据设计的需要添加细节。扩展方法和类的定义。         \n\n# 模式思考       \n\n* **设计模式的原则与策略**             \n> **开闭原则** 模块、方法和类应该对扩展开放，对修改封闭。        \n> **从背景设计原则** 从背景设计，在设计各部分所呈现的细节之前，先创建总体概念。              \n> **依赖倒置原则** 依赖抽象。1.高层模块不应该依赖于低层模块。高层模块和低层模块都应该依赖抽象。2.抽象不应该依赖于细节。细节应该依赖于抽象。          \n> **封装变化原则**      \n> **抽象类与接口** 1.抽象类允许有公共的状态和行为；2.不直接共享状态或行为的对象或者必须从另一个类派生的对象实现接口。           \n\n\n# 其他模式         \n\n* **Decorator模式**             \n> **定义** 动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式比生成子类更为灵活。             \n> **意图** 动态地给一个对象添加职责。           \n> **问题** 要使用的对象拥有执行所需的基本功能。但是，可能需要为这个对象添加某些功能，这些附加功能可能发生在对象的基础功能之前或之后。             \n> **解决方案** 可以无需创建子类，而扩展一个对象的功能。         \n> **参与者与协作者** ConcreteComponent让Decorator对象为自己添加功能。有时候用ConcreteComponent的派生类提供核心功能，在这种情况下ConcreteComponent类就不再是具体的，而是抽象的。Component类定义了这些类所使用的接口。              \n> **效果** 所添加的功能放在小对象中。好处是可以在ConcreteComponent对象的功能之前或之后动态添加功能。注意，虽然装饰对象可以在被装饰对象之前或之后添加功能，但对象链总是终于ConcreteComponent对象。               \n> **实现** 创建一个抽象类来表示原类和要添加到这个类的新功能。在装饰类中，将对新功能的调用放在对紧随其后对象的调用之前或之后，以获得正确的顺序。                                  \n> **拓展** Decorator模式要求对象链的实例化与使用它的Client对象完全分离开。最典型的实现是通过使用工厂对象，根据某些配置信息实例化对象链。对对象进行前置测试和后置测试也是这种模式的一个重要用途。       \n* **Observer模式**                  \n> **定义** 定义对象间的一种一对多的依赖关系，当一个对象状态发生变化时，所有依赖它的对象都将得到通知并自动更新。             \n> **意图** 在对象之间定义一种一对多的依赖关系，这样当一个对象的状态改变时，所有依赖者都将得到通知并自动更新。             \n> **问题** 当某个事件发生时，需要向一系列变化的对象发出通知。      \n> **解决方案** Observer将监听某个事件的责任委托给中心对象：Subject。                \n> **参与者与协作者** Subject知道自己的Observer，因为Observer要向它注册。Subject必须在所监视的事件发生时通知Observer。Observer负责向Subject注册，以及在得到通知时从Subject处获取信息。            \n> **效果** 如果某些Observer只对事件的一个子集感兴趣，那么Subject可能会告诉它们不需要知道的事件。如果Subject通知Observer，Observer还返回请求更多信息，则可能需要额外的通信。          \n> **实现** 当某个事件发生时，需要知道的对象将自己注册到另一个监视事件发生或自己触发事件的对象上。事件发生时，Subject告诉Observer事件已经发生。为了对所有Observer类型的对象实现Observer接口，有时候需要使用Adapter模式。                 \n\n* **Template Method模式**                          \n> **定义** 定义一个操作中算法的骨架，而将一些步骤延迟到子类中。不改变算法的结构而重定义它的步骤。         \n> **意图** 定义一个操作中算法的骨架，将一些步骤推迟到子类中实现。可以不改变算法的结构而重定义该算法的步骤。              \n> **问题** 要完成在某一细节层次一致的一个过程或一系列步骤，但某个别步骤在更详细的层次上实现可能不同。                    \n> **解决方案** 允许定义可变的子步骤，同时保持基本过程一致。      \n> **参与者与协作者** Template Method模式由一个抽象类组成，这个抽象类定义了需要覆盖的基本TemplateMethod方法。每个从这个抽象类派生的具体类将为此模板实现新方法。                \n> **效果** 模板提供了一个很好的代码复用平台。它还有助于确保所需步骤的实现。它将每个Concrete类的覆盖步骤绑定起来，因此只有在这些变化总是并且只能一起发生时，才应该使用TemplateMethod模式。         \n> **实现** 创建一个抽象类，用抽象方法实现一个过程。这些抽象方法必须在子类中实现，以执行过程的每个步骤。如果这些步骤是独立变化的，那么每个步骤都可以用Strategy模式来实现。                 \n\n* **工厂模式**           \n> 工厂模式将对象的创建与管理和对象的使用解耦。               \n> 遵循工厂模式，开发可以分成两步：1.定义对象和它们的协作方式；2.编写为相应情况实例化对象并在对象共享时管理已有对象的工厂。        \n\n* **Singleton模式**                               \n> **定义** 保证一个类仅有一个实例，并提供一个访问它的全局访问点。        \n> **意图** 希望对象只有一个实例，但没有控制对象实例化的全局对象。还希望确保所有实体使用该对象相同的实例，而无需将引用传给它们。       \n> **问题** 几个不同的客户对象需要引用同一对象，而且希望确保这种类型对象恕不不超过一个。              \n> **解决方案** 保证一个实例。               \n> **参与者与协作者** Client对象只能通过getInstance方法创建Singleton实例。                \n> **效果** Client对象无需操心是否已存在Singleton实例。这是有Singleton自己控制的。                \n> **实现** 1.添加一个类的私有的静态成员变量，引用所需的对象；2.添加一个静态方法，它在成员变量为null时实例化这个类，然后返回该成员变量的值；3.将构造函数的状态设置为保护或私有，从而防止任何人直接实例化这个类，绕过静态构造函数的机制。                  \n> **Double-Checked Locking模式** Singleton的多线程版本。       \n* **Object Pool模式**                  \n> **定义** 在存在共享资源而且与该资源单点联系较为有益时，通过封装这些职责，使用这些对象的客户不仅免于这些职责，而且还可以与这些职责相关的修改隔离开来。                      \n> **意图** 在创建对象比较昂贵，或者对于特定类型能够创建的对象数目有限制时，管理对象的重用。         \n> **问题** 对象的创建或管理必须遵守一组定义明确的规则集。通常这些规则都与如何创建对象、能够创建多少个对象和在已有对象完成当前任务时如何重用它们等等相关。             \n> **解决方案** 在需要一个Reusable对象时，Client调用ReusablePool的acquireReusable方法。如果池是空的，那么acquireReusable方法创建一个Reusable对象，否则，就等待直到有Reusable对象返回集合。     \n> **参与者与协作者** ReusablePool管理者Client所有的Reusable对象的可用性。Client然后在一个有限的时间段使用Reusable对象的实例，ReusablePool包含所有Reusable对象，这样就可以对其以统一的方式进行管理。          \n> **效果** 最使用于对对象的需求一直非常稳定的时候，需求变化太大会带来性能问题。Object Pool中为了解决这一问题，限制了能够创建的对象的数量。使管理实例创建的逻辑与实例被使用的类分离，可以得到内聚更好的设计。                     \n> **实现** 如果可以创建对象的数量有限制，或者池的大小有限制，可以使用一个简单的数组来实现池。否则，使用vector对象，负责管理对象池的对象必须是唯一能够创建这些对象的对象。ReusablePool使用Singleton模式实现。另一种变体是在Reusable对象中加一个释放方法，让它自己返回到池。       \n> **应用** 应用服务器与数据服务器之间的TCP/IP连接对象。                           \n\n* **Factory Method模式**             \n> **定义** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使实例化延迟到其子类。             \n> **意图** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。将实例化推迟到子类。                   \n> **问题** 一个类需要实例化另一个类的派生类，但不知道是哪一个。Factory Method允许派生类进行决策。                 \n> **解决方案** 派生类对实例化哪个类和如何实例化做出决策。        \n> **参与者与协作者** Product是工厂所创建的对象类型的接口。Creator是定义工厂方法的接口。                 \n> **效果** 客户讲需要派生Creator，以创建一个特定的ConcreteProduct对象。             \n> **实现** 在抽象类中使用一个抽象方法。需要实例化一个被包含对象的时候，抽象类的代码将引用此方法，但是不知道需要的对象是哪一个。       \n> **Abstract Factory** Abstract Factory模式中，有一个抽象类定义创建一系列对象的方法。为每个可能存在的对象序列都派生一个类。所有定义在抽象类中，然后在派生类中覆盖的方法都遵循了Factory Method模式。        \n> **举例** 容器的迭代器。               \n> **工厂总结** 对于系统中的两个实体，应该将它们的关系限制为A使用B，或者A创建/管理B，但是两中关系永远不要同时存在。              \n     \n\n# **总结**\n* **面向对象的设计原则**             \n1. 对象是具有明确定义的责任的事物                  \n2. 对象对自己负责\n3. 封装指任何形式的隐藏：\n    1）数据隐藏\n    2）实现隐藏\n    3）类隐藏\n    4）设计隐藏\n    5）实例化隐藏\n3. 使用共性和可变性抽象出行为和数据中的变化              \n4. 按接口设计             \n5. 将继承看成一种将变化概念化的方法，而不是创建已有对象的特殊情形。               \n6. 将变化放入一个类中，并与该类中的其它变化解耦              \n7. 力求松耦合               \n8. 力求强内聚                  \n9. 将使用一个对象的代码与创建该对象的代码分离            \n10. 通过“按意图编程”，使用反映意图的名字，确保代码的可读性      \n11. 在编程之间就考虑代码的可测试性                           \n\n> 在最后阶段，模式不再重要，重要的是模式教会我们对真实的感悟力~\n","source":"_posts/DesignPattern.md","raw":"---\ntitle: 设计模式(Design Pattern)\ndate: 2017-11-05 21:26:11\ntags: [Design Pattern, UML]\ncategories: Design Pattern\n---\n#  面向对象软件开发简介     \n* **结构化程序设计面临的一些问题**       \n1.  程序各部分承担责任不平衡，“主”程序承受的责任太多，容易产生非常复杂的代码。     \n2.  “主”程序需要关注太多的细节，对需求的变化，十分无力。     \n* **理解对象**    \n> 概念--什么责任；规约--怎么用；实现--怎么做到的    \n1. 在概念层次上，对象是一组责任       \n2. 在规约层次上，对象是一组可以被其它对象或自己调用的方法        \n3. 在实现层次上，对象是代码和数据，以及它们之间的计算交互        \n\n#  UML 统一建模语言\n* **UML图类型**     \n1. 用例图-->分析阶段      \n2. 交互图-->观察对象交互      \n3. 类图-->设计阶段     \n4. 状态图-->观察对象状态与行为        \n5. 部署图-->配置阶段      \n* **类之间关系**         \n1. 泛化(Generalization)--> is-a     \n2. 实现(Realization)--> 实现接口     \n3. 依赖(Dependency)--> 一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系      \n4. 关联(Association)--> 包括：聚合(Aggregation)、组合(Composition)     \n    > 聚合和组合的区别在于：聚合关系是“has-a”关系，组合关系是“contains-a”关系；聚合关系表示整体与部分的关系比较弱，而组合比较强；聚合关系中代表部分事物的对象与代表聚合事物的对象的生存期无关，一旦删除了聚合对象不一定就删除了代表部分事物的对象。组合中一旦删除了组合对象，同时也就删除了代表部分事物的对象。[更多参考](http://www.uml.org.cn/oobject/201104212.asp)        \n\n5. 多重性(Multiplicity)--> 通常在关联中使用。就是代表有多少个关联对象存在。       \n\n#  传统面向对象设计的局限       \n> 传统面向对象设计：特化和复用           \n> 传统面向对象设计奖一切作为特例来解决问题。这种解决方案直截了当。但是有几个缺点：高冗余、低内聚和类爆炸。       \n\n# 设计模式      \n* **面向对象设计的一些策略**           \n1. 按接口编程        \n2. 尽量用聚合代替继承             \n3. 找出变化并封装               \n* **Facade模式**              \n> **定义：** 为子系统中的一组接口提供一个统一接口。      \n> **意图：** 希望简化原有系统的使用方式，定义自己的接口。       \n> **问题：** 只需要摸个复杂系统的子集，或者需要以一种特殊的方式与系统交互。         \n> **解决方案：** Facade为原有系统的客户提供一个新的接口。        \n> **效果：** Facade模式简化了对所需子系统的使用过程。但是由于Facade并不完整，因此客户可能无法使用某些功能。        \n> **实现：** 定义一个或多个具备所需接口的新类。      \n> **举例：** 比如某产品中对Service的单例封装。    \n> **应用：** 1.简化复杂系统；2.封装或隐藏原系统；3.希望在原系统基础上增加一些新的功能。          \n\n* **Adapter模式**          \n> **定义：** 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。       \n> **意图：** 使控制范围之外的一个原有对象与某个接口匹配。        \n> **问题：** 系统的数据和行为都正确，但是接口不符。通常用于必须从抽象类派生使。           \n> **解决方案：** Adapter模式提供了具有所需接口的包装类。           \n> **参与者与协作者：** Adapter改变了Adaptee的接口，使Adaptee与Adapter的基类Target匹配。这样Client就可以使用Adaptee了，就好像它是Target。                 \n> **效果：** Adapter模式使原有对象能够适应新的类结构，不受其他接口的限制。            \n> **实现：** 将原有类包含在另一个类之中。让包含类与需要的接口匹配，调用被包含类的方法。           \n> **类型：** 对象Adapter模式(组合)；类Adapter模式(继承)。       \n> **与Facade的异同：** Facade模式简化了接口，而Adapter模式将一个已有的接口转换成另一个接口。             \n\n* **开拓视野**        \n> **软件设计思路：** 功能分隔-->定义接口-->实现接口(关注动机而非实现)。                \n> **理解封装:** 任何形式的隐藏，可是是数据、实现细节、派生类、设计细节、实例化规则。比如：通过抽象类或接口隐藏类。                 \n> **使用继承来特化的问题：** 1.可能导致弱内聚；2.减少复用的可能性；3.无法根据变化很好地伸缩。             \n> **发现变化并将其封装**         \n> **共性和可变性分析：** 共性分析寻找的是不可能随时间而变化的结构，而可变性分析则要找到可能变化的结构。可变性分析只在共性分析定义的上下文中才有意义。从架构的角度来看，共性分析为架构提供长效的要素，而可变性分析则促成它适应实际使用的需求。更具体的了解：抽象类（共性）、派生类（可变性）。              \n> **敏捷编程的品质：** 极限编程的核心是循序渐进的开发，在编程的同时进行验证。大的概念是从众多小的概念演化而来的。敏捷的品质：1.无冗余；2.可读；3.可测试。      \n> **测试驱动开发TDD的优势：** 1.最后能够得到一组自动化测试。2.必须按方法的接口而非实现来设计，这样得到封装更好、耦合更松散的方法。3.关注测试会让你注意到概念费城多个可测试的部分，这样能够获得强内聚和松耦合。             \n\n* **Strategy模式**                \n> **定义：** 定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。Strategy模式使算法可以独立于使用它的客户变化。       \n> **意图：** 可以根据上下文，使用不同的业务规则或算法。       \n> **问题：** 对所需算法的选择取决于发出请求的客户或者要处理的数据。如果只有一些不会变化的算法，就不需要Strategy模式。        \n> **解决方案：** 将对算法的选择和算法的实现分离。允许根据上下文进行选择。        \n> **参与者与协作者：** 1.Strategy指定了如果有使用不同的算法；2.各ConcreteStrategy实现了这些不同的算法；3.Context根据类型为Strategy的引用使用具体的ConcreteStrategy。         \n> **效果：** 1.Strategy模式定义了一系列算法；2.可以不使用switch语句或条件语句；3.必须以相同的方式调用所有的算法。      \n> **实现：** 让使用算法的类Context包含一个抽象类Strategy，该抽象类有一个抽象的方法指定如何调用短发。每个派生类按需要实现算法。    \n> **扩展：** C++函数指针和C#委托都可以维持一个无状态的Strategy。        \n\n* **Bridge模式**               \n> **定义：** 将抽象与其实现解耦，使它们可以独立地变化。       \n> **意图：** 将一组实现与另一组使用它们的对象分离。        \n> **问题：** 一个抽象类的派生类必须使用多个实现，但不能出现类数量的爆炸性增长。      \n> **解决方案：** 为所有实现定义一个接口，供抽象类的所有派生类使用。     \n> **参与者与协作者：** Abstraction为要实现的对象定义接口，Implementor为具体的实现定义接口。Abstraction派生类使用Implementor的派生类，却无需知道自己具体使用哪一个ConcreteImplementor。     \n> **效果：** 实现与使用实现的对象解耦，提供了可扩展性，客户对象无需操心实现问题。      \n> **实现：** 1.将实现封装在一个抽象类中；2.在要实现的抽象的基类中包含一个实现的句柄。        \n> **应用举例：** 打印机驱动程序，驱动程序打印不同种类的对象(抽象)与使用的打印机(实现)可以解耦。          \n\n* **AbstractFactory模式**              \n> **定义：** 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。      \n> **意图：** 需要为特定的客户(或情况)提供对象组。     \n> **问题：** 需要实例化一组相关的对象。         \n> **解决方案：** 协调对象组的创建。提供一种方式，将如何执行对象实例化的规则从使用这些对象的客户对象提取出来。           \n> **参与者与协作者：** AbstractFactory为如何创建对象组的每个成员定义接口。一般每个组都由独立的ConcreteFactory进行创建。      \n> **效果：** 这个模式将“使用那些对象”的规则与“如何使用这些对象”的逻辑分离开来，重新划分了类的责任。              \n> **实现：** 定义一个抽象类来指定创建那些对象。然后为每个组实现一个具体类。              \n\n# 模式组合      \n\n* **专家设计之道**                  \n> Alexander描述了一种基于模式的方法：1.从对整体的概念性理解开始，以理解需求实现的目标；2.找到在整体中出现的模式；3.从为其他模式创建背景的那些模式开始；4.从背景向内，应用这些模式，找到新模式，并重复；5.最后，通过每次应用一个模式，改进设计，并在所创建的背景中予以实现。                 \n\n* **用模式思考**             \n> 1. **找出模式**。在问题领域中找出模式。           \n> 2. **分析和应用模式**。对于要进行分析的模式集合，执2a到2d。        \n2a. **按背景的创造顺序将模式排序**。根据为其他模式创造背景的情况将模式排序。其原理是，一个模式将为另一个模式的创造背景，不会出现两个模式互为彼此创建背景的情况。    \n2b. **选择模式并扩展设计**。根据排序，选择列表中的下一个模式，用它得到高层的概念设计。       \n2c. **找到其他模式**。找到在分析中可能出现的其他模式，将它们添加到要分析的模式集合中。             \n2d. **重复**。对没有融合概念设计的模式重复以上步骤。         \n> 3. **添加细节**。根据设计的需要添加细节。扩展方法和类的定义。         \n\n# 模式思考       \n\n* **设计模式的原则与策略**             \n> **开闭原则** 模块、方法和类应该对扩展开放，对修改封闭。        \n> **从背景设计原则** 从背景设计，在设计各部分所呈现的细节之前，先创建总体概念。              \n> **依赖倒置原则** 依赖抽象。1.高层模块不应该依赖于低层模块。高层模块和低层模块都应该依赖抽象。2.抽象不应该依赖于细节。细节应该依赖于抽象。          \n> **封装变化原则**      \n> **抽象类与接口** 1.抽象类允许有公共的状态和行为；2.不直接共享状态或行为的对象或者必须从另一个类派生的对象实现接口。           \n\n\n# 其他模式         \n\n* **Decorator模式**             \n> **定义** 动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式比生成子类更为灵活。             \n> **意图** 动态地给一个对象添加职责。           \n> **问题** 要使用的对象拥有执行所需的基本功能。但是，可能需要为这个对象添加某些功能，这些附加功能可能发生在对象的基础功能之前或之后。             \n> **解决方案** 可以无需创建子类，而扩展一个对象的功能。         \n> **参与者与协作者** ConcreteComponent让Decorator对象为自己添加功能。有时候用ConcreteComponent的派生类提供核心功能，在这种情况下ConcreteComponent类就不再是具体的，而是抽象的。Component类定义了这些类所使用的接口。              \n> **效果** 所添加的功能放在小对象中。好处是可以在ConcreteComponent对象的功能之前或之后动态添加功能。注意，虽然装饰对象可以在被装饰对象之前或之后添加功能，但对象链总是终于ConcreteComponent对象。               \n> **实现** 创建一个抽象类来表示原类和要添加到这个类的新功能。在装饰类中，将对新功能的调用放在对紧随其后对象的调用之前或之后，以获得正确的顺序。                                  \n> **拓展** Decorator模式要求对象链的实例化与使用它的Client对象完全分离开。最典型的实现是通过使用工厂对象，根据某些配置信息实例化对象链。对对象进行前置测试和后置测试也是这种模式的一个重要用途。       \n* **Observer模式**                  \n> **定义** 定义对象间的一种一对多的依赖关系，当一个对象状态发生变化时，所有依赖它的对象都将得到通知并自动更新。             \n> **意图** 在对象之间定义一种一对多的依赖关系，这样当一个对象的状态改变时，所有依赖者都将得到通知并自动更新。             \n> **问题** 当某个事件发生时，需要向一系列变化的对象发出通知。      \n> **解决方案** Observer将监听某个事件的责任委托给中心对象：Subject。                \n> **参与者与协作者** Subject知道自己的Observer，因为Observer要向它注册。Subject必须在所监视的事件发生时通知Observer。Observer负责向Subject注册，以及在得到通知时从Subject处获取信息。            \n> **效果** 如果某些Observer只对事件的一个子集感兴趣，那么Subject可能会告诉它们不需要知道的事件。如果Subject通知Observer，Observer还返回请求更多信息，则可能需要额外的通信。          \n> **实现** 当某个事件发生时，需要知道的对象将自己注册到另一个监视事件发生或自己触发事件的对象上。事件发生时，Subject告诉Observer事件已经发生。为了对所有Observer类型的对象实现Observer接口，有时候需要使用Adapter模式。                 \n\n* **Template Method模式**                          \n> **定义** 定义一个操作中算法的骨架，而将一些步骤延迟到子类中。不改变算法的结构而重定义它的步骤。         \n> **意图** 定义一个操作中算法的骨架，将一些步骤推迟到子类中实现。可以不改变算法的结构而重定义该算法的步骤。              \n> **问题** 要完成在某一细节层次一致的一个过程或一系列步骤，但某个别步骤在更详细的层次上实现可能不同。                    \n> **解决方案** 允许定义可变的子步骤，同时保持基本过程一致。      \n> **参与者与协作者** Template Method模式由一个抽象类组成，这个抽象类定义了需要覆盖的基本TemplateMethod方法。每个从这个抽象类派生的具体类将为此模板实现新方法。                \n> **效果** 模板提供了一个很好的代码复用平台。它还有助于确保所需步骤的实现。它将每个Concrete类的覆盖步骤绑定起来，因此只有在这些变化总是并且只能一起发生时，才应该使用TemplateMethod模式。         \n> **实现** 创建一个抽象类，用抽象方法实现一个过程。这些抽象方法必须在子类中实现，以执行过程的每个步骤。如果这些步骤是独立变化的，那么每个步骤都可以用Strategy模式来实现。                 \n\n* **工厂模式**           \n> 工厂模式将对象的创建与管理和对象的使用解耦。               \n> 遵循工厂模式，开发可以分成两步：1.定义对象和它们的协作方式；2.编写为相应情况实例化对象并在对象共享时管理已有对象的工厂。        \n\n* **Singleton模式**                               \n> **定义** 保证一个类仅有一个实例，并提供一个访问它的全局访问点。        \n> **意图** 希望对象只有一个实例，但没有控制对象实例化的全局对象。还希望确保所有实体使用该对象相同的实例，而无需将引用传给它们。       \n> **问题** 几个不同的客户对象需要引用同一对象，而且希望确保这种类型对象恕不不超过一个。              \n> **解决方案** 保证一个实例。               \n> **参与者与协作者** Client对象只能通过getInstance方法创建Singleton实例。                \n> **效果** Client对象无需操心是否已存在Singleton实例。这是有Singleton自己控制的。                \n> **实现** 1.添加一个类的私有的静态成员变量，引用所需的对象；2.添加一个静态方法，它在成员变量为null时实例化这个类，然后返回该成员变量的值；3.将构造函数的状态设置为保护或私有，从而防止任何人直接实例化这个类，绕过静态构造函数的机制。                  \n> **Double-Checked Locking模式** Singleton的多线程版本。       \n* **Object Pool模式**                  \n> **定义** 在存在共享资源而且与该资源单点联系较为有益时，通过封装这些职责，使用这些对象的客户不仅免于这些职责，而且还可以与这些职责相关的修改隔离开来。                      \n> **意图** 在创建对象比较昂贵，或者对于特定类型能够创建的对象数目有限制时，管理对象的重用。         \n> **问题** 对象的创建或管理必须遵守一组定义明确的规则集。通常这些规则都与如何创建对象、能够创建多少个对象和在已有对象完成当前任务时如何重用它们等等相关。             \n> **解决方案** 在需要一个Reusable对象时，Client调用ReusablePool的acquireReusable方法。如果池是空的，那么acquireReusable方法创建一个Reusable对象，否则，就等待直到有Reusable对象返回集合。     \n> **参与者与协作者** ReusablePool管理者Client所有的Reusable对象的可用性。Client然后在一个有限的时间段使用Reusable对象的实例，ReusablePool包含所有Reusable对象，这样就可以对其以统一的方式进行管理。          \n> **效果** 最使用于对对象的需求一直非常稳定的时候，需求变化太大会带来性能问题。Object Pool中为了解决这一问题，限制了能够创建的对象的数量。使管理实例创建的逻辑与实例被使用的类分离，可以得到内聚更好的设计。                     \n> **实现** 如果可以创建对象的数量有限制，或者池的大小有限制，可以使用一个简单的数组来实现池。否则，使用vector对象，负责管理对象池的对象必须是唯一能够创建这些对象的对象。ReusablePool使用Singleton模式实现。另一种变体是在Reusable对象中加一个释放方法，让它自己返回到池。       \n> **应用** 应用服务器与数据服务器之间的TCP/IP连接对象。                           \n\n* **Factory Method模式**             \n> **定义** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使实例化延迟到其子类。             \n> **意图** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。将实例化推迟到子类。                   \n> **问题** 一个类需要实例化另一个类的派生类，但不知道是哪一个。Factory Method允许派生类进行决策。                 \n> **解决方案** 派生类对实例化哪个类和如何实例化做出决策。        \n> **参与者与协作者** Product是工厂所创建的对象类型的接口。Creator是定义工厂方法的接口。                 \n> **效果** 客户讲需要派生Creator，以创建一个特定的ConcreteProduct对象。             \n> **实现** 在抽象类中使用一个抽象方法。需要实例化一个被包含对象的时候，抽象类的代码将引用此方法，但是不知道需要的对象是哪一个。       \n> **Abstract Factory** Abstract Factory模式中，有一个抽象类定义创建一系列对象的方法。为每个可能存在的对象序列都派生一个类。所有定义在抽象类中，然后在派生类中覆盖的方法都遵循了Factory Method模式。        \n> **举例** 容器的迭代器。               \n> **工厂总结** 对于系统中的两个实体，应该将它们的关系限制为A使用B，或者A创建/管理B，但是两中关系永远不要同时存在。              \n     \n\n# **总结**\n* **面向对象的设计原则**             \n1. 对象是具有明确定义的责任的事物                  \n2. 对象对自己负责\n3. 封装指任何形式的隐藏：\n    1）数据隐藏\n    2）实现隐藏\n    3）类隐藏\n    4）设计隐藏\n    5）实例化隐藏\n3. 使用共性和可变性抽象出行为和数据中的变化              \n4. 按接口设计             \n5. 将继承看成一种将变化概念化的方法，而不是创建已有对象的特殊情形。               \n6. 将变化放入一个类中，并与该类中的其它变化解耦              \n7. 力求松耦合               \n8. 力求强内聚                  \n9. 将使用一个对象的代码与创建该对象的代码分离            \n10. 通过“按意图编程”，使用反映意图的名字，确保代码的可读性      \n11. 在编程之间就考虑代码的可测试性                           \n\n> 在最后阶段，模式不再重要，重要的是模式教会我们对真实的感悟力~\n","slug":"DesignPattern","published":1,"updated":"2017-11-17T13:18:02.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v350002tkuixq6o47cy","content":"<h1 id=\"面向对象软件开发简介\"><a href=\"#面向对象软件开发简介\" class=\"headerlink\" title=\"面向对象软件开发简介\"></a>面向对象软件开发简介</h1><ul>\n<li><strong>结构化程序设计面临的一些问题</strong>       </li>\n</ul>\n<ol>\n<li>程序各部分承担责任不平衡，“主”程序承受的责任太多，容易产生非常复杂的代码。     </li>\n<li>“主”程序需要关注太多的细节，对需求的变化，十分无力。     </li>\n</ol>\n<ul>\n<li><strong>理解对象</strong>    <blockquote>\n<p>概念–什么责任；规约–怎么用；实现–怎么做到的    </p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>在概念层次上，对象是一组责任       </li>\n<li>在规约层次上，对象是一组可以被其它对象或自己调用的方法        </li>\n<li>在实现层次上，对象是代码和数据，以及它们之间的计算交互        </li>\n</ol>\n<h1 id=\"UML-统一建模语言\"><a href=\"#UML-统一建模语言\" class=\"headerlink\" title=\"UML 统一建模语言\"></a>UML 统一建模语言</h1><ul>\n<li><strong>UML图类型</strong>     </li>\n</ul>\n<ol>\n<li>用例图–&gt;分析阶段      </li>\n<li>交互图–&gt;观察对象交互      </li>\n<li>类图–&gt;设计阶段     </li>\n<li>状态图–&gt;观察对象状态与行为        </li>\n<li>部署图–&gt;配置阶段      </li>\n</ol>\n<ul>\n<li><strong>类之间关系</strong>         </li>\n</ul>\n<ol>\n<li>泛化(Generalization)–&gt; is-a     </li>\n<li>实现(Realization)–&gt; 实现接口     </li>\n<li>依赖(Dependency)–&gt; 一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系      </li>\n<li><p>关联(Association)–&gt; 包括：聚合(Aggregation)、组合(Composition)     </p>\n<blockquote>\n<p>聚合和组合的区别在于：聚合关系是“has-a”关系，组合关系是“contains-a”关系；聚合关系表示整体与部分的关系比较弱，而组合比较强；聚合关系中代表部分事物的对象与代表聚合事物的对象的生存期无关，一旦删除了聚合对象不一定就删除了代表部分事物的对象。组合中一旦删除了组合对象，同时也就删除了代表部分事物的对象。<a href=\"http://www.uml.org.cn/oobject/201104212.asp\" target=\"_blank\" rel=\"external\">更多参考</a>        </p>\n</blockquote>\n</li>\n<li><p>多重性(Multiplicity)–&gt; 通常在关联中使用。就是代表有多少个关联对象存在。       </p>\n</li>\n</ol>\n<h1 id=\"传统面向对象设计的局限\"><a href=\"#传统面向对象设计的局限\" class=\"headerlink\" title=\"传统面向对象设计的局限\"></a>传统面向对象设计的局限</h1><blockquote>\n<p>传统面向对象设计：特化和复用<br>传统面向对象设计奖一切作为特例来解决问题。这种解决方案直截了当。但是有几个缺点：高冗余、低内聚和类爆炸。       </p>\n</blockquote>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li><strong>面向对象设计的一些策略</strong>           </li>\n</ul>\n<ol>\n<li>按接口编程        </li>\n<li>尽量用聚合代替继承             </li>\n<li>找出变化并封装               </li>\n</ol>\n<ul>\n<li><p><strong>Facade模式</strong>              </p>\n<blockquote>\n<p><strong>定义：</strong> 为子系统中的一组接口提供一个统一接口。<br><strong>意图：</strong> 希望简化原有系统的使用方式，定义自己的接口。<br><strong>问题：</strong> 只需要摸个复杂系统的子集，或者需要以一种特殊的方式与系统交互。<br><strong>解决方案：</strong> Facade为原有系统的客户提供一个新的接口。<br><strong>效果：</strong> Facade模式简化了对所需子系统的使用过程。但是由于Facade并不完整，因此客户可能无法使用某些功能。<br><strong>实现：</strong> 定义一个或多个具备所需接口的新类。<br><strong>举例：</strong> 比如某产品中对Service的单例封装。<br><strong>应用：</strong> 1.简化复杂系统；2.封装或隐藏原系统；3.希望在原系统基础上增加一些新的功能。          </p>\n</blockquote>\n</li>\n<li><p><strong>Adapter模式</strong>          </p>\n<blockquote>\n<p><strong>定义：</strong> 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。<br><strong>意图：</strong> 使控制范围之外的一个原有对象与某个接口匹配。<br><strong>问题：</strong> 系统的数据和行为都正确，但是接口不符。通常用于必须从抽象类派生使。<br><strong>解决方案：</strong> Adapter模式提供了具有所需接口的包装类。<br><strong>参与者与协作者：</strong> Adapter改变了Adaptee的接口，使Adaptee与Adapter的基类Target匹配。这样Client就可以使用Adaptee了，就好像它是Target。<br><strong>效果：</strong> Adapter模式使原有对象能够适应新的类结构，不受其他接口的限制。<br><strong>实现：</strong> 将原有类包含在另一个类之中。让包含类与需要的接口匹配，调用被包含类的方法。<br><strong>类型：</strong> 对象Adapter模式(组合)；类Adapter模式(继承)。<br><strong>与Facade的异同：</strong> Facade模式简化了接口，而Adapter模式将一个已有的接口转换成另一个接口。             </p>\n</blockquote>\n</li>\n<li><p><strong>开拓视野</strong>        </p>\n<blockquote>\n<p><strong>软件设计思路：</strong> 功能分隔–&gt;定义接口–&gt;实现接口(关注动机而非实现)。<br><strong>理解封装:</strong> 任何形式的隐藏，可是是数据、实现细节、派生类、设计细节、实例化规则。比如：通过抽象类或接口隐藏类。<br><strong>使用继承来特化的问题：</strong> 1.可能导致弱内聚；2.减少复用的可能性；3.无法根据变化很好地伸缩。<br><strong>发现变化并将其封装</strong><br><strong>共性和可变性分析：</strong> 共性分析寻找的是不可能随时间而变化的结构，而可变性分析则要找到可能变化的结构。可变性分析只在共性分析定义的上下文中才有意义。从架构的角度来看，共性分析为架构提供长效的要素，而可变性分析则促成它适应实际使用的需求。更具体的了解：抽象类（共性）、派生类（可变性）。<br><strong>敏捷编程的品质：</strong> 极限编程的核心是循序渐进的开发，在编程的同时进行验证。大的概念是从众多小的概念演化而来的。敏捷的品质：1.无冗余；2.可读；3.可测试。<br><strong>测试驱动开发TDD的优势：</strong> 1.最后能够得到一组自动化测试。2.必须按方法的接口而非实现来设计，这样得到封装更好、耦合更松散的方法。3.关注测试会让你注意到概念费城多个可测试的部分，这样能够获得强内聚和松耦合。             </p>\n</blockquote>\n</li>\n<li><p><strong>Strategy模式</strong>                </p>\n<blockquote>\n<p><strong>定义：</strong> 定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。Strategy模式使算法可以独立于使用它的客户变化。<br><strong>意图：</strong> 可以根据上下文，使用不同的业务规则或算法。<br><strong>问题：</strong> 对所需算法的选择取决于发出请求的客户或者要处理的数据。如果只有一些不会变化的算法，就不需要Strategy模式。<br><strong>解决方案：</strong> 将对算法的选择和算法的实现分离。允许根据上下文进行选择。<br><strong>参与者与协作者：</strong> 1.Strategy指定了如果有使用不同的算法；2.各ConcreteStrategy实现了这些不同的算法；3.Context根据类型为Strategy的引用使用具体的ConcreteStrategy。<br><strong>效果：</strong> 1.Strategy模式定义了一系列算法；2.可以不使用switch语句或条件语句；3.必须以相同的方式调用所有的算法。<br><strong>实现：</strong> 让使用算法的类Context包含一个抽象类Strategy，该抽象类有一个抽象的方法指定如何调用短发。每个派生类按需要实现算法。<br><strong>扩展：</strong> C++函数指针和C#委托都可以维持一个无状态的Strategy。        </p>\n</blockquote>\n</li>\n<li><p><strong>Bridge模式</strong>               </p>\n<blockquote>\n<p><strong>定义：</strong> 将抽象与其实现解耦，使它们可以独立地变化。<br><strong>意图：</strong> 将一组实现与另一组使用它们的对象分离。<br><strong>问题：</strong> 一个抽象类的派生类必须使用多个实现，但不能出现类数量的爆炸性增长。<br><strong>解决方案：</strong> 为所有实现定义一个接口，供抽象类的所有派生类使用。<br><strong>参与者与协作者：</strong> Abstraction为要实现的对象定义接口，Implementor为具体的实现定义接口。Abstraction派生类使用Implementor的派生类，却无需知道自己具体使用哪一个ConcreteImplementor。<br><strong>效果：</strong> 实现与使用实现的对象解耦，提供了可扩展性，客户对象无需操心实现问题。<br><strong>实现：</strong> 1.将实现封装在一个抽象类中；2.在要实现的抽象的基类中包含一个实现的句柄。<br><strong>应用举例：</strong> 打印机驱动程序，驱动程序打印不同种类的对象(抽象)与使用的打印机(实现)可以解耦。          </p>\n</blockquote>\n</li>\n<li><p><strong>AbstractFactory模式</strong>              </p>\n<blockquote>\n<p><strong>定义：</strong> 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。<br><strong>意图：</strong> 需要为特定的客户(或情况)提供对象组。<br><strong>问题：</strong> 需要实例化一组相关的对象。<br><strong>解决方案：</strong> 协调对象组的创建。提供一种方式，将如何执行对象实例化的规则从使用这些对象的客户对象提取出来。<br><strong>参与者与协作者：</strong> AbstractFactory为如何创建对象组的每个成员定义接口。一般每个组都由独立的ConcreteFactory进行创建。<br><strong>效果：</strong> 这个模式将“使用那些对象”的规则与“如何使用这些对象”的逻辑分离开来，重新划分了类的责任。<br><strong>实现：</strong> 定义一个抽象类来指定创建那些对象。然后为每个组实现一个具体类。              </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"模式组合\"><a href=\"#模式组合\" class=\"headerlink\" title=\"模式组合\"></a>模式组合</h1><ul>\n<li><p><strong>专家设计之道</strong>                  </p>\n<blockquote>\n<p>Alexander描述了一种基于模式的方法：1.从对整体的概念性理解开始，以理解需求实现的目标；2.找到在整体中出现的模式；3.从为其他模式创建背景的那些模式开始；4.从背景向内，应用这些模式，找到新模式，并重复；5.最后，通过每次应用一个模式，改进设计，并在所创建的背景中予以实现。                 </p>\n</blockquote>\n</li>\n<li><p><strong>用模式思考</strong>             </p>\n<blockquote>\n<ol>\n<li><strong>找出模式</strong>。在问题领域中找出模式。           </li>\n<li><strong>分析和应用模式</strong>。对于要进行分析的模式集合，执2a到2d。<br>2a. <strong>按背景的创造顺序将模式排序</strong>。根据为其他模式创造背景的情况将模式排序。其原理是，一个模式将为另一个模式的创造背景，不会出现两个模式互为彼此创建背景的情况。<br>2b. <strong>选择模式并扩展设计</strong>。根据排序，选择列表中的下一个模式，用它得到高层的概念设计。<br>2c. <strong>找到其他模式</strong>。找到在分析中可能出现的其他模式，将它们添加到要分析的模式集合中。<br>2d. <strong>重复</strong>。对没有融合概念设计的模式重复以上步骤。         </li>\n<li><strong>添加细节</strong>。根据设计的需要添加细节。扩展方法和类的定义。         </li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"模式思考\"><a href=\"#模式思考\" class=\"headerlink\" title=\"模式思考\"></a>模式思考</h1><ul>\n<li><strong>设计模式的原则与策略</strong>             <blockquote>\n<p><strong>开闭原则</strong> 模块、方法和类应该对扩展开放，对修改封闭。<br><strong>从背景设计原则</strong> 从背景设计，在设计各部分所呈现的细节之前，先创建总体概念。<br><strong>依赖倒置原则</strong> 依赖抽象。1.高层模块不应该依赖于低层模块。高层模块和低层模块都应该依赖抽象。2.抽象不应该依赖于细节。细节应该依赖于抽象。<br><strong>封装变化原则</strong><br><strong>抽象类与接口</strong> 1.抽象类允许有公共的状态和行为；2.不直接共享状态或行为的对象或者必须从另一个类派生的对象实现接口。           </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"其他模式\"><a href=\"#其他模式\" class=\"headerlink\" title=\"其他模式\"></a>其他模式</h1><ul>\n<li><strong>Decorator模式</strong>             <blockquote>\n<p><strong>定义</strong> 动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式比生成子类更为灵活。<br><strong>意图</strong> 动态地给一个对象添加职责。<br><strong>问题</strong> 要使用的对象拥有执行所需的基本功能。但是，可能需要为这个对象添加某些功能，这些附加功能可能发生在对象的基础功能之前或之后。<br><strong>解决方案</strong> 可以无需创建子类，而扩展一个对象的功能。<br><strong>参与者与协作者</strong> ConcreteComponent让Decorator对象为自己添加功能。有时候用ConcreteComponent的派生类提供核心功能，在这种情况下ConcreteComponent类就不再是具体的，而是抽象的。Component类定义了这些类所使用的接口。<br><strong>效果</strong> 所添加的功能放在小对象中。好处是可以在ConcreteComponent对象的功能之前或之后动态添加功能。注意，虽然装饰对象可以在被装饰对象之前或之后添加功能，但对象链总是终于ConcreteComponent对象。<br><strong>实现</strong> 创建一个抽象类来表示原类和要添加到这个类的新功能。在装饰类中，将对新功能的调用放在对紧随其后对象的调用之前或之后，以获得正确的顺序。<br><strong>拓展</strong> Decorator模式要求对象链的实例化与使用它的Client对象完全分离开。最典型的实现是通过使用工厂对象，根据某些配置信息实例化对象链。对对象进行前置测试和后置测试也是这种模式的一个重要用途。       </p>\n</blockquote>\n</li>\n<li><p><strong>Observer模式</strong>                  </p>\n<blockquote>\n<p><strong>定义</strong> 定义对象间的一种一对多的依赖关系，当一个对象状态发生变化时，所有依赖它的对象都将得到通知并自动更新。<br><strong>意图</strong> 在对象之间定义一种一对多的依赖关系，这样当一个对象的状态改变时，所有依赖者都将得到通知并自动更新。<br><strong>问题</strong> 当某个事件发生时，需要向一系列变化的对象发出通知。<br><strong>解决方案</strong> Observer将监听某个事件的责任委托给中心对象：Subject。<br><strong>参与者与协作者</strong> Subject知道自己的Observer，因为Observer要向它注册。Subject必须在所监视的事件发生时通知Observer。Observer负责向Subject注册，以及在得到通知时从Subject处获取信息。<br><strong>效果</strong> 如果某些Observer只对事件的一个子集感兴趣，那么Subject可能会告诉它们不需要知道的事件。如果Subject通知Observer，Observer还返回请求更多信息，则可能需要额外的通信。<br><strong>实现</strong> 当某个事件发生时，需要知道的对象将自己注册到另一个监视事件发生或自己触发事件的对象上。事件发生时，Subject告诉Observer事件已经发生。为了对所有Observer类型的对象实现Observer接口，有时候需要使用Adapter模式。                 </p>\n</blockquote>\n</li>\n<li><p><strong>Template Method模式</strong>                          </p>\n<blockquote>\n<p><strong>定义</strong> 定义一个操作中算法的骨架，而将一些步骤延迟到子类中。不改变算法的结构而重定义它的步骤。<br><strong>意图</strong> 定义一个操作中算法的骨架，将一些步骤推迟到子类中实现。可以不改变算法的结构而重定义该算法的步骤。<br><strong>问题</strong> 要完成在某一细节层次一致的一个过程或一系列步骤，但某个别步骤在更详细的层次上实现可能不同。<br><strong>解决方案</strong> 允许定义可变的子步骤，同时保持基本过程一致。<br><strong>参与者与协作者</strong> Template Method模式由一个抽象类组成，这个抽象类定义了需要覆盖的基本TemplateMethod方法。每个从这个抽象类派生的具体类将为此模板实现新方法。<br><strong>效果</strong> 模板提供了一个很好的代码复用平台。它还有助于确保所需步骤的实现。它将每个Concrete类的覆盖步骤绑定起来，因此只有在这些变化总是并且只能一起发生时，才应该使用TemplateMethod模式。<br><strong>实现</strong> 创建一个抽象类，用抽象方法实现一个过程。这些抽象方法必须在子类中实现，以执行过程的每个步骤。如果这些步骤是独立变化的，那么每个步骤都可以用Strategy模式来实现。                 </p>\n</blockquote>\n</li>\n<li><p><strong>工厂模式</strong>           </p>\n<blockquote>\n<p>工厂模式将对象的创建与管理和对象的使用解耦。<br>遵循工厂模式，开发可以分成两步：1.定义对象和它们的协作方式；2.编写为相应情况实例化对象并在对象共享时管理已有对象的工厂。        </p>\n</blockquote>\n</li>\n<li><p><strong>Singleton模式</strong>                               </p>\n<blockquote>\n<p><strong>定义</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>意图</strong> 希望对象只有一个实例，但没有控制对象实例化的全局对象。还希望确保所有实体使用该对象相同的实例，而无需将引用传给它们。<br><strong>问题</strong> 几个不同的客户对象需要引用同一对象，而且希望确保这种类型对象恕不不超过一个。<br><strong>解决方案</strong> 保证一个实例。<br><strong>参与者与协作者</strong> Client对象只能通过getInstance方法创建Singleton实例。<br><strong>效果</strong> Client对象无需操心是否已存在Singleton实例。这是有Singleton自己控制的。<br><strong>实现</strong> 1.添加一个类的私有的静态成员变量，引用所需的对象；2.添加一个静态方法，它在成员变量为null时实例化这个类，然后返回该成员变量的值；3.将构造函数的状态设置为保护或私有，从而防止任何人直接实例化这个类，绕过静态构造函数的机制。<br><strong>Double-Checked Locking模式</strong> Singleton的多线程版本。       </p>\n</blockquote>\n</li>\n<li><p><strong>Object Pool模式</strong>                  </p>\n<blockquote>\n<p><strong>定义</strong> 在存在共享资源而且与该资源单点联系较为有益时，通过封装这些职责，使用这些对象的客户不仅免于这些职责，而且还可以与这些职责相关的修改隔离开来。<br><strong>意图</strong> 在创建对象比较昂贵，或者对于特定类型能够创建的对象数目有限制时，管理对象的重用。<br><strong>问题</strong> 对象的创建或管理必须遵守一组定义明确的规则集。通常这些规则都与如何创建对象、能够创建多少个对象和在已有对象完成当前任务时如何重用它们等等相关。<br><strong>解决方案</strong> 在需要一个Reusable对象时，Client调用ReusablePool的acquireReusable方法。如果池是空的，那么acquireReusable方法创建一个Reusable对象，否则，就等待直到有Reusable对象返回集合。<br><strong>参与者与协作者</strong> ReusablePool管理者Client所有的Reusable对象的可用性。Client然后在一个有限的时间段使用Reusable对象的实例，ReusablePool包含所有Reusable对象，这样就可以对其以统一的方式进行管理。<br><strong>效果</strong> 最使用于对对象的需求一直非常稳定的时候，需求变化太大会带来性能问题。Object Pool中为了解决这一问题，限制了能够创建的对象的数量。使管理实例创建的逻辑与实例被使用的类分离，可以得到内聚更好的设计。<br><strong>实现</strong> 如果可以创建对象的数量有限制，或者池的大小有限制，可以使用一个简单的数组来实现池。否则，使用vector对象，负责管理对象池的对象必须是唯一能够创建这些对象的对象。ReusablePool使用Singleton模式实现。另一种变体是在Reusable对象中加一个释放方法，让它自己返回到池。<br><strong>应用</strong> 应用服务器与数据服务器之间的TCP/IP连接对象。                           </p>\n</blockquote>\n</li>\n<li><p><strong>Factory Method模式</strong>             </p>\n<blockquote>\n<p><strong>定义</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使实例化延迟到其子类。<br><strong>意图</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。将实例化推迟到子类。<br><strong>问题</strong> 一个类需要实例化另一个类的派生类，但不知道是哪一个。Factory Method允许派生类进行决策。<br><strong>解决方案</strong> 派生类对实例化哪个类和如何实例化做出决策。<br><strong>参与者与协作者</strong> Product是工厂所创建的对象类型的接口。Creator是定义工厂方法的接口。<br><strong>效果</strong> 客户讲需要派生Creator，以创建一个特定的ConcreteProduct对象。<br><strong>实现</strong> 在抽象类中使用一个抽象方法。需要实例化一个被包含对象的时候，抽象类的代码将引用此方法，但是不知道需要的对象是哪一个。<br><strong>Abstract Factory</strong> Abstract Factory模式中，有一个抽象类定义创建一系列对象的方法。为每个可能存在的对象序列都派生一个类。所有定义在抽象类中，然后在派生类中覆盖的方法都遵循了Factory Method模式。<br><strong>举例</strong> 容器的迭代器。<br><strong>工厂总结</strong> 对于系统中的两个实体，应该将它们的关系限制为A使用B，或者A创建/管理B，但是两中关系永远不要同时存在。              </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><ul>\n<li><strong>面向对象的设计原则</strong>             </li>\n</ul>\n<ol>\n<li>对象是具有明确定义的责任的事物                  </li>\n<li>对象对自己负责</li>\n<li>封装指任何形式的隐藏：<br> 1）数据隐藏<br> 2）实现隐藏<br> 3）类隐藏<br> 4）设计隐藏<br> 5）实例化隐藏</li>\n<li>使用共性和可变性抽象出行为和数据中的变化              </li>\n<li>按接口设计             </li>\n<li>将继承看成一种将变化概念化的方法，而不是创建已有对象的特殊情形。               </li>\n<li>将变化放入一个类中，并与该类中的其它变化解耦              </li>\n<li>力求松耦合               </li>\n<li>力求强内聚                  </li>\n<li>将使用一个对象的代码与创建该对象的代码分离            </li>\n<li>通过“按意图编程”，使用反映意图的名字，确保代码的可读性      </li>\n<li>在编程之间就考虑代码的可测试性                           </li>\n</ol>\n<blockquote>\n<p>在最后阶段，模式不再重要，重要的是模式教会我们对真实的感悟力~</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象软件开发简介\"><a href=\"#面向对象软件开发简介\" class=\"headerlink\" title=\"面向对象软件开发简介\"></a>面向对象软件开发简介</h1><ul>\n<li><strong>结构化程序设计面临的一些问题</strong>       </li>\n</ul>\n<ol>\n<li>程序各部分承担责任不平衡，“主”程序承受的责任太多，容易产生非常复杂的代码。     </li>\n<li>“主”程序需要关注太多的细节，对需求的变化，十分无力。     </li>\n</ol>\n<ul>\n<li><strong>理解对象</strong>    <blockquote>\n<p>概念–什么责任；规约–怎么用；实现–怎么做到的    </p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>在概念层次上，对象是一组责任       </li>\n<li>在规约层次上，对象是一组可以被其它对象或自己调用的方法        </li>\n<li>在实现层次上，对象是代码和数据，以及它们之间的计算交互        </li>\n</ol>\n<h1 id=\"UML-统一建模语言\"><a href=\"#UML-统一建模语言\" class=\"headerlink\" title=\"UML 统一建模语言\"></a>UML 统一建模语言</h1><ul>\n<li><strong>UML图类型</strong>     </li>\n</ul>\n<ol>\n<li>用例图–&gt;分析阶段      </li>\n<li>交互图–&gt;观察对象交互      </li>\n<li>类图–&gt;设计阶段     </li>\n<li>状态图–&gt;观察对象状态与行为        </li>\n<li>部署图–&gt;配置阶段      </li>\n</ol>\n<ul>\n<li><strong>类之间关系</strong>         </li>\n</ul>\n<ol>\n<li>泛化(Generalization)–&gt; is-a     </li>\n<li>实现(Realization)–&gt; 实现接口     </li>\n<li>依赖(Dependency)–&gt; 一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系      </li>\n<li><p>关联(Association)–&gt; 包括：聚合(Aggregation)、组合(Composition)     </p>\n<blockquote>\n<p>聚合和组合的区别在于：聚合关系是“has-a”关系，组合关系是“contains-a”关系；聚合关系表示整体与部分的关系比较弱，而组合比较强；聚合关系中代表部分事物的对象与代表聚合事物的对象的生存期无关，一旦删除了聚合对象不一定就删除了代表部分事物的对象。组合中一旦删除了组合对象，同时也就删除了代表部分事物的对象。<a href=\"http://www.uml.org.cn/oobject/201104212.asp\" target=\"_blank\" rel=\"external\">更多参考</a>        </p>\n</blockquote>\n</li>\n<li><p>多重性(Multiplicity)–&gt; 通常在关联中使用。就是代表有多少个关联对象存在。       </p>\n</li>\n</ol>\n<h1 id=\"传统面向对象设计的局限\"><a href=\"#传统面向对象设计的局限\" class=\"headerlink\" title=\"传统面向对象设计的局限\"></a>传统面向对象设计的局限</h1><blockquote>\n<p>传统面向对象设计：特化和复用<br>传统面向对象设计奖一切作为特例来解决问题。这种解决方案直截了当。但是有几个缺点：高冗余、低内聚和类爆炸。       </p>\n</blockquote>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li><strong>面向对象设计的一些策略</strong>           </li>\n</ul>\n<ol>\n<li>按接口编程        </li>\n<li>尽量用聚合代替继承             </li>\n<li>找出变化并封装               </li>\n</ol>\n<ul>\n<li><p><strong>Facade模式</strong>              </p>\n<blockquote>\n<p><strong>定义：</strong> 为子系统中的一组接口提供一个统一接口。<br><strong>意图：</strong> 希望简化原有系统的使用方式，定义自己的接口。<br><strong>问题：</strong> 只需要摸个复杂系统的子集，或者需要以一种特殊的方式与系统交互。<br><strong>解决方案：</strong> Facade为原有系统的客户提供一个新的接口。<br><strong>效果：</strong> Facade模式简化了对所需子系统的使用过程。但是由于Facade并不完整，因此客户可能无法使用某些功能。<br><strong>实现：</strong> 定义一个或多个具备所需接口的新类。<br><strong>举例：</strong> 比如某产品中对Service的单例封装。<br><strong>应用：</strong> 1.简化复杂系统；2.封装或隐藏原系统；3.希望在原系统基础上增加一些新的功能。          </p>\n</blockquote>\n</li>\n<li><p><strong>Adapter模式</strong>          </p>\n<blockquote>\n<p><strong>定义：</strong> 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。<br><strong>意图：</strong> 使控制范围之外的一个原有对象与某个接口匹配。<br><strong>问题：</strong> 系统的数据和行为都正确，但是接口不符。通常用于必须从抽象类派生使。<br><strong>解决方案：</strong> Adapter模式提供了具有所需接口的包装类。<br><strong>参与者与协作者：</strong> Adapter改变了Adaptee的接口，使Adaptee与Adapter的基类Target匹配。这样Client就可以使用Adaptee了，就好像它是Target。<br><strong>效果：</strong> Adapter模式使原有对象能够适应新的类结构，不受其他接口的限制。<br><strong>实现：</strong> 将原有类包含在另一个类之中。让包含类与需要的接口匹配，调用被包含类的方法。<br><strong>类型：</strong> 对象Adapter模式(组合)；类Adapter模式(继承)。<br><strong>与Facade的异同：</strong> Facade模式简化了接口，而Adapter模式将一个已有的接口转换成另一个接口。             </p>\n</blockquote>\n</li>\n<li><p><strong>开拓视野</strong>        </p>\n<blockquote>\n<p><strong>软件设计思路：</strong> 功能分隔–&gt;定义接口–&gt;实现接口(关注动机而非实现)。<br><strong>理解封装:</strong> 任何形式的隐藏，可是是数据、实现细节、派生类、设计细节、实例化规则。比如：通过抽象类或接口隐藏类。<br><strong>使用继承来特化的问题：</strong> 1.可能导致弱内聚；2.减少复用的可能性；3.无法根据变化很好地伸缩。<br><strong>发现变化并将其封装</strong><br><strong>共性和可变性分析：</strong> 共性分析寻找的是不可能随时间而变化的结构，而可变性分析则要找到可能变化的结构。可变性分析只在共性分析定义的上下文中才有意义。从架构的角度来看，共性分析为架构提供长效的要素，而可变性分析则促成它适应实际使用的需求。更具体的了解：抽象类（共性）、派生类（可变性）。<br><strong>敏捷编程的品质：</strong> 极限编程的核心是循序渐进的开发，在编程的同时进行验证。大的概念是从众多小的概念演化而来的。敏捷的品质：1.无冗余；2.可读；3.可测试。<br><strong>测试驱动开发TDD的优势：</strong> 1.最后能够得到一组自动化测试。2.必须按方法的接口而非实现来设计，这样得到封装更好、耦合更松散的方法。3.关注测试会让你注意到概念费城多个可测试的部分，这样能够获得强内聚和松耦合。             </p>\n</blockquote>\n</li>\n<li><p><strong>Strategy模式</strong>                </p>\n<blockquote>\n<p><strong>定义：</strong> 定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。Strategy模式使算法可以独立于使用它的客户变化。<br><strong>意图：</strong> 可以根据上下文，使用不同的业务规则或算法。<br><strong>问题：</strong> 对所需算法的选择取决于发出请求的客户或者要处理的数据。如果只有一些不会变化的算法，就不需要Strategy模式。<br><strong>解决方案：</strong> 将对算法的选择和算法的实现分离。允许根据上下文进行选择。<br><strong>参与者与协作者：</strong> 1.Strategy指定了如果有使用不同的算法；2.各ConcreteStrategy实现了这些不同的算法；3.Context根据类型为Strategy的引用使用具体的ConcreteStrategy。<br><strong>效果：</strong> 1.Strategy模式定义了一系列算法；2.可以不使用switch语句或条件语句；3.必须以相同的方式调用所有的算法。<br><strong>实现：</strong> 让使用算法的类Context包含一个抽象类Strategy，该抽象类有一个抽象的方法指定如何调用短发。每个派生类按需要实现算法。<br><strong>扩展：</strong> C++函数指针和C#委托都可以维持一个无状态的Strategy。        </p>\n</blockquote>\n</li>\n<li><p><strong>Bridge模式</strong>               </p>\n<blockquote>\n<p><strong>定义：</strong> 将抽象与其实现解耦，使它们可以独立地变化。<br><strong>意图：</strong> 将一组实现与另一组使用它们的对象分离。<br><strong>问题：</strong> 一个抽象类的派生类必须使用多个实现，但不能出现类数量的爆炸性增长。<br><strong>解决方案：</strong> 为所有实现定义一个接口，供抽象类的所有派生类使用。<br><strong>参与者与协作者：</strong> Abstraction为要实现的对象定义接口，Implementor为具体的实现定义接口。Abstraction派生类使用Implementor的派生类，却无需知道自己具体使用哪一个ConcreteImplementor。<br><strong>效果：</strong> 实现与使用实现的对象解耦，提供了可扩展性，客户对象无需操心实现问题。<br><strong>实现：</strong> 1.将实现封装在一个抽象类中；2.在要实现的抽象的基类中包含一个实现的句柄。<br><strong>应用举例：</strong> 打印机驱动程序，驱动程序打印不同种类的对象(抽象)与使用的打印机(实现)可以解耦。          </p>\n</blockquote>\n</li>\n<li><p><strong>AbstractFactory模式</strong>              </p>\n<blockquote>\n<p><strong>定义：</strong> 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。<br><strong>意图：</strong> 需要为特定的客户(或情况)提供对象组。<br><strong>问题：</strong> 需要实例化一组相关的对象。<br><strong>解决方案：</strong> 协调对象组的创建。提供一种方式，将如何执行对象实例化的规则从使用这些对象的客户对象提取出来。<br><strong>参与者与协作者：</strong> AbstractFactory为如何创建对象组的每个成员定义接口。一般每个组都由独立的ConcreteFactory进行创建。<br><strong>效果：</strong> 这个模式将“使用那些对象”的规则与“如何使用这些对象”的逻辑分离开来，重新划分了类的责任。<br><strong>实现：</strong> 定义一个抽象类来指定创建那些对象。然后为每个组实现一个具体类。              </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"模式组合\"><a href=\"#模式组合\" class=\"headerlink\" title=\"模式组合\"></a>模式组合</h1><ul>\n<li><p><strong>专家设计之道</strong>                  </p>\n<blockquote>\n<p>Alexander描述了一种基于模式的方法：1.从对整体的概念性理解开始，以理解需求实现的目标；2.找到在整体中出现的模式；3.从为其他模式创建背景的那些模式开始；4.从背景向内，应用这些模式，找到新模式，并重复；5.最后，通过每次应用一个模式，改进设计，并在所创建的背景中予以实现。                 </p>\n</blockquote>\n</li>\n<li><p><strong>用模式思考</strong>             </p>\n<blockquote>\n<ol>\n<li><strong>找出模式</strong>。在问题领域中找出模式。           </li>\n<li><strong>分析和应用模式</strong>。对于要进行分析的模式集合，执2a到2d。<br>2a. <strong>按背景的创造顺序将模式排序</strong>。根据为其他模式创造背景的情况将模式排序。其原理是，一个模式将为另一个模式的创造背景，不会出现两个模式互为彼此创建背景的情况。<br>2b. <strong>选择模式并扩展设计</strong>。根据排序，选择列表中的下一个模式，用它得到高层的概念设计。<br>2c. <strong>找到其他模式</strong>。找到在分析中可能出现的其他模式，将它们添加到要分析的模式集合中。<br>2d. <strong>重复</strong>。对没有融合概念设计的模式重复以上步骤。         </li>\n<li><strong>添加细节</strong>。根据设计的需要添加细节。扩展方法和类的定义。         </li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"模式思考\"><a href=\"#模式思考\" class=\"headerlink\" title=\"模式思考\"></a>模式思考</h1><ul>\n<li><strong>设计模式的原则与策略</strong>             <blockquote>\n<p><strong>开闭原则</strong> 模块、方法和类应该对扩展开放，对修改封闭。<br><strong>从背景设计原则</strong> 从背景设计，在设计各部分所呈现的细节之前，先创建总体概念。<br><strong>依赖倒置原则</strong> 依赖抽象。1.高层模块不应该依赖于低层模块。高层模块和低层模块都应该依赖抽象。2.抽象不应该依赖于细节。细节应该依赖于抽象。<br><strong>封装变化原则</strong><br><strong>抽象类与接口</strong> 1.抽象类允许有公共的状态和行为；2.不直接共享状态或行为的对象或者必须从另一个类派生的对象实现接口。           </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"其他模式\"><a href=\"#其他模式\" class=\"headerlink\" title=\"其他模式\"></a>其他模式</h1><ul>\n<li><strong>Decorator模式</strong>             <blockquote>\n<p><strong>定义</strong> 动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式比生成子类更为灵活。<br><strong>意图</strong> 动态地给一个对象添加职责。<br><strong>问题</strong> 要使用的对象拥有执行所需的基本功能。但是，可能需要为这个对象添加某些功能，这些附加功能可能发生在对象的基础功能之前或之后。<br><strong>解决方案</strong> 可以无需创建子类，而扩展一个对象的功能。<br><strong>参与者与协作者</strong> ConcreteComponent让Decorator对象为自己添加功能。有时候用ConcreteComponent的派生类提供核心功能，在这种情况下ConcreteComponent类就不再是具体的，而是抽象的。Component类定义了这些类所使用的接口。<br><strong>效果</strong> 所添加的功能放在小对象中。好处是可以在ConcreteComponent对象的功能之前或之后动态添加功能。注意，虽然装饰对象可以在被装饰对象之前或之后添加功能，但对象链总是终于ConcreteComponent对象。<br><strong>实现</strong> 创建一个抽象类来表示原类和要添加到这个类的新功能。在装饰类中，将对新功能的调用放在对紧随其后对象的调用之前或之后，以获得正确的顺序。<br><strong>拓展</strong> Decorator模式要求对象链的实例化与使用它的Client对象完全分离开。最典型的实现是通过使用工厂对象，根据某些配置信息实例化对象链。对对象进行前置测试和后置测试也是这种模式的一个重要用途。       </p>\n</blockquote>\n</li>\n<li><p><strong>Observer模式</strong>                  </p>\n<blockquote>\n<p><strong>定义</strong> 定义对象间的一种一对多的依赖关系，当一个对象状态发生变化时，所有依赖它的对象都将得到通知并自动更新。<br><strong>意图</strong> 在对象之间定义一种一对多的依赖关系，这样当一个对象的状态改变时，所有依赖者都将得到通知并自动更新。<br><strong>问题</strong> 当某个事件发生时，需要向一系列变化的对象发出通知。<br><strong>解决方案</strong> Observer将监听某个事件的责任委托给中心对象：Subject。<br><strong>参与者与协作者</strong> Subject知道自己的Observer，因为Observer要向它注册。Subject必须在所监视的事件发生时通知Observer。Observer负责向Subject注册，以及在得到通知时从Subject处获取信息。<br><strong>效果</strong> 如果某些Observer只对事件的一个子集感兴趣，那么Subject可能会告诉它们不需要知道的事件。如果Subject通知Observer，Observer还返回请求更多信息，则可能需要额外的通信。<br><strong>实现</strong> 当某个事件发生时，需要知道的对象将自己注册到另一个监视事件发生或自己触发事件的对象上。事件发生时，Subject告诉Observer事件已经发生。为了对所有Observer类型的对象实现Observer接口，有时候需要使用Adapter模式。                 </p>\n</blockquote>\n</li>\n<li><p><strong>Template Method模式</strong>                          </p>\n<blockquote>\n<p><strong>定义</strong> 定义一个操作中算法的骨架，而将一些步骤延迟到子类中。不改变算法的结构而重定义它的步骤。<br><strong>意图</strong> 定义一个操作中算法的骨架，将一些步骤推迟到子类中实现。可以不改变算法的结构而重定义该算法的步骤。<br><strong>问题</strong> 要完成在某一细节层次一致的一个过程或一系列步骤，但某个别步骤在更详细的层次上实现可能不同。<br><strong>解决方案</strong> 允许定义可变的子步骤，同时保持基本过程一致。<br><strong>参与者与协作者</strong> Template Method模式由一个抽象类组成，这个抽象类定义了需要覆盖的基本TemplateMethod方法。每个从这个抽象类派生的具体类将为此模板实现新方法。<br><strong>效果</strong> 模板提供了一个很好的代码复用平台。它还有助于确保所需步骤的实现。它将每个Concrete类的覆盖步骤绑定起来，因此只有在这些变化总是并且只能一起发生时，才应该使用TemplateMethod模式。<br><strong>实现</strong> 创建一个抽象类，用抽象方法实现一个过程。这些抽象方法必须在子类中实现，以执行过程的每个步骤。如果这些步骤是独立变化的，那么每个步骤都可以用Strategy模式来实现。                 </p>\n</blockquote>\n</li>\n<li><p><strong>工厂模式</strong>           </p>\n<blockquote>\n<p>工厂模式将对象的创建与管理和对象的使用解耦。<br>遵循工厂模式，开发可以分成两步：1.定义对象和它们的协作方式；2.编写为相应情况实例化对象并在对象共享时管理已有对象的工厂。        </p>\n</blockquote>\n</li>\n<li><p><strong>Singleton模式</strong>                               </p>\n<blockquote>\n<p><strong>定义</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>意图</strong> 希望对象只有一个实例，但没有控制对象实例化的全局对象。还希望确保所有实体使用该对象相同的实例，而无需将引用传给它们。<br><strong>问题</strong> 几个不同的客户对象需要引用同一对象，而且希望确保这种类型对象恕不不超过一个。<br><strong>解决方案</strong> 保证一个实例。<br><strong>参与者与协作者</strong> Client对象只能通过getInstance方法创建Singleton实例。<br><strong>效果</strong> Client对象无需操心是否已存在Singleton实例。这是有Singleton自己控制的。<br><strong>实现</strong> 1.添加一个类的私有的静态成员变量，引用所需的对象；2.添加一个静态方法，它在成员变量为null时实例化这个类，然后返回该成员变量的值；3.将构造函数的状态设置为保护或私有，从而防止任何人直接实例化这个类，绕过静态构造函数的机制。<br><strong>Double-Checked Locking模式</strong> Singleton的多线程版本。       </p>\n</blockquote>\n</li>\n<li><p><strong>Object Pool模式</strong>                  </p>\n<blockquote>\n<p><strong>定义</strong> 在存在共享资源而且与该资源单点联系较为有益时，通过封装这些职责，使用这些对象的客户不仅免于这些职责，而且还可以与这些职责相关的修改隔离开来。<br><strong>意图</strong> 在创建对象比较昂贵，或者对于特定类型能够创建的对象数目有限制时，管理对象的重用。<br><strong>问题</strong> 对象的创建或管理必须遵守一组定义明确的规则集。通常这些规则都与如何创建对象、能够创建多少个对象和在已有对象完成当前任务时如何重用它们等等相关。<br><strong>解决方案</strong> 在需要一个Reusable对象时，Client调用ReusablePool的acquireReusable方法。如果池是空的，那么acquireReusable方法创建一个Reusable对象，否则，就等待直到有Reusable对象返回集合。<br><strong>参与者与协作者</strong> ReusablePool管理者Client所有的Reusable对象的可用性。Client然后在一个有限的时间段使用Reusable对象的实例，ReusablePool包含所有Reusable对象，这样就可以对其以统一的方式进行管理。<br><strong>效果</strong> 最使用于对对象的需求一直非常稳定的时候，需求变化太大会带来性能问题。Object Pool中为了解决这一问题，限制了能够创建的对象的数量。使管理实例创建的逻辑与实例被使用的类分离，可以得到内聚更好的设计。<br><strong>实现</strong> 如果可以创建对象的数量有限制，或者池的大小有限制，可以使用一个简单的数组来实现池。否则，使用vector对象，负责管理对象池的对象必须是唯一能够创建这些对象的对象。ReusablePool使用Singleton模式实现。另一种变体是在Reusable对象中加一个释放方法，让它自己返回到池。<br><strong>应用</strong> 应用服务器与数据服务器之间的TCP/IP连接对象。                           </p>\n</blockquote>\n</li>\n<li><p><strong>Factory Method模式</strong>             </p>\n<blockquote>\n<p><strong>定义</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使实例化延迟到其子类。<br><strong>意图</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。将实例化推迟到子类。<br><strong>问题</strong> 一个类需要实例化另一个类的派生类，但不知道是哪一个。Factory Method允许派生类进行决策。<br><strong>解决方案</strong> 派生类对实例化哪个类和如何实例化做出决策。<br><strong>参与者与协作者</strong> Product是工厂所创建的对象类型的接口。Creator是定义工厂方法的接口。<br><strong>效果</strong> 客户讲需要派生Creator，以创建一个特定的ConcreteProduct对象。<br><strong>实现</strong> 在抽象类中使用一个抽象方法。需要实例化一个被包含对象的时候，抽象类的代码将引用此方法，但是不知道需要的对象是哪一个。<br><strong>Abstract Factory</strong> Abstract Factory模式中，有一个抽象类定义创建一系列对象的方法。为每个可能存在的对象序列都派生一个类。所有定义在抽象类中，然后在派生类中覆盖的方法都遵循了Factory Method模式。<br><strong>举例</strong> 容器的迭代器。<br><strong>工厂总结</strong> 对于系统中的两个实体，应该将它们的关系限制为A使用B，或者A创建/管理B，但是两中关系永远不要同时存在。              </p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><ul>\n<li><strong>面向对象的设计原则</strong>             </li>\n</ul>\n<ol>\n<li>对象是具有明确定义的责任的事物                  </li>\n<li>对象对自己负责</li>\n<li>封装指任何形式的隐藏：<br> 1）数据隐藏<br> 2）实现隐藏<br> 3）类隐藏<br> 4）设计隐藏<br> 5）实例化隐藏</li>\n<li>使用共性和可变性抽象出行为和数据中的变化              </li>\n<li>按接口设计             </li>\n<li>将继承看成一种将变化概念化的方法，而不是创建已有对象的特殊情形。               </li>\n<li>将变化放入一个类中，并与该类中的其它变化解耦              </li>\n<li>力求松耦合               </li>\n<li>力求强内聚                  </li>\n<li>将使用一个对象的代码与创建该对象的代码分离            </li>\n<li>通过“按意图编程”，使用反映意图的名字，确保代码的可读性      </li>\n<li>在编程之间就考虑代码的可测试性                           </li>\n</ol>\n<blockquote>\n<p>在最后阶段，模式不再重要，重要的是模式教会我们对真实的感悟力~</p>\n</blockquote>\n"},{"title":"C#中的异常处理(Exception Process in C#)","date":"2017-11-11T08:27:15.000Z","_content":"# 异常处理规则             \n1. 不要抛出“new Exception()”-->抽象的异常往往让人迷惑          \n2. 不要只记录Exception.Message的值，还需要记录Exception.ToString()-->Exception.ToString()包含“堆栈跟踪”信息     \n3. catch要捕捉具体异常-->好的代码只捕捉知道的异常      \n4. using使用-->异常发生时，using能放在资源泄露              \n5. 新异常应将原始异常作为其内部异常            \n6. catch抛出新异常会导致call stack丢失-->不处理异常时可以“throw;”              \n\n# 自定义异常     \n\n```             \npublic class SQLException : Exception\n{\n    public SQLException(string message) : base(message)\n    {\n    }\n}\n```          \n\n# 异常处理                      \n* **应用程序处理未捕获的异常**              \n\n```                     \nstatic void InitUnhandledException()\n{\n    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n}\nstatic void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)\n{\n    var exception = unhandledExceptionEventArgs.ExceptionObject as Exception;\n    //Log\n}\n```                   \n\n> 未捕获的异常，通常就是运行时期的**BUG**，于是我们可以在UnhandledException的注册事件方法CurrentDomain_UnhandledException中将未捕获异常的信息**记录在日志中**。值得注意的是，UnhandledException提供的机制并不能阻止应用程序终止，也就是说，CurrentDomain_UnhandledException方法执行后，应用程序就会被终止。当然，这只是处理Console的未处理异常，还有更多[相关细节](http://www.cnblogs.com/luminji/archive/2011/01/05/1926033.html)。          \n\n\n# 异常报告--CrashReporter.NET功能介绍","source":"_posts/ExceptionProcessor.md","raw":"---\ntitle: C#中的异常处理(Exception Process in C#)\ndate: 2017-11-11 16:27:15\ntags: [Exception, C#]\ncategories: C#\n---\n# 异常处理规则             \n1. 不要抛出“new Exception()”-->抽象的异常往往让人迷惑          \n2. 不要只记录Exception.Message的值，还需要记录Exception.ToString()-->Exception.ToString()包含“堆栈跟踪”信息     \n3. catch要捕捉具体异常-->好的代码只捕捉知道的异常      \n4. using使用-->异常发生时，using能放在资源泄露              \n5. 新异常应将原始异常作为其内部异常            \n6. catch抛出新异常会导致call stack丢失-->不处理异常时可以“throw;”              \n\n# 自定义异常     \n\n```             \npublic class SQLException : Exception\n{\n    public SQLException(string message) : base(message)\n    {\n    }\n}\n```          \n\n# 异常处理                      \n* **应用程序处理未捕获的异常**              \n\n```                     \nstatic void InitUnhandledException()\n{\n    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n}\nstatic void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)\n{\n    var exception = unhandledExceptionEventArgs.ExceptionObject as Exception;\n    //Log\n}\n```                   \n\n> 未捕获的异常，通常就是运行时期的**BUG**，于是我们可以在UnhandledException的注册事件方法CurrentDomain_UnhandledException中将未捕获异常的信息**记录在日志中**。值得注意的是，UnhandledException提供的机制并不能阻止应用程序终止，也就是说，CurrentDomain_UnhandledException方法执行后，应用程序就会被终止。当然，这只是处理Console的未处理异常，还有更多[相关细节](http://www.cnblogs.com/luminji/archive/2011/01/05/1926033.html)。          \n\n\n# 异常报告--CrashReporter.NET功能介绍","slug":"ExceptionProcessor","published":1,"updated":"2017-11-11T12:00:06.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v3n0006tkuiyglaws26","content":"<h1 id=\"异常处理规则\"><a href=\"#异常处理规则\" class=\"headerlink\" title=\"异常处理规则\"></a>异常处理规则</h1><ol>\n<li>不要抛出“new Exception()”–&gt;抽象的异常往往让人迷惑          </li>\n<li>不要只记录Exception.Message的值，还需要记录Exception.ToString()–&gt;Exception.ToString()包含“堆栈跟踪”信息     </li>\n<li>catch要捕捉具体异常–&gt;好的代码只捕捉知道的异常      </li>\n<li>using使用–&gt;异常发生时，using能放在资源泄露              </li>\n<li>新异常应将原始异常作为其内部异常            </li>\n<li>catch抛出新异常会导致call stack丢失–&gt;不处理异常时可以“throw;”              </li>\n</ol>\n<h1 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h1><pre><code>public class SQLException : Exception\n{\n    public SQLException(string message) : base(message)\n    {\n    }\n}\n</code></pre><h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li><strong>应用程序处理未捕获的异常</strong>              </li>\n</ul>\n<pre><code>static void InitUnhandledException()\n{\n    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n}\nstatic void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)\n{\n    var exception = unhandledExceptionEventArgs.ExceptionObject as Exception;\n    //Log\n}\n</code></pre><blockquote>\n<p>未捕获的异常，通常就是运行时期的<strong>BUG</strong>，于是我们可以在UnhandledException的注册事件方法CurrentDomain_UnhandledException中将未捕获异常的信息<strong>记录在日志中</strong>。值得注意的是，UnhandledException提供的机制并不能阻止应用程序终止，也就是说，CurrentDomain_UnhandledException方法执行后，应用程序就会被终止。当然，这只是处理Console的未处理异常，还有更多<a href=\"http://www.cnblogs.com/luminji/archive/2011/01/05/1926033.html\" target=\"_blank\" rel=\"external\">相关细节</a>。          </p>\n</blockquote>\n<h1 id=\"异常报告–CrashReporter-NET功能介绍\"><a href=\"#异常报告–CrashReporter-NET功能介绍\" class=\"headerlink\" title=\"异常报告–CrashReporter.NET功能介绍\"></a>异常报告–CrashReporter.NET功能介绍</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异常处理规则\"><a href=\"#异常处理规则\" class=\"headerlink\" title=\"异常处理规则\"></a>异常处理规则</h1><ol>\n<li>不要抛出“new Exception()”–&gt;抽象的异常往往让人迷惑          </li>\n<li>不要只记录Exception.Message的值，还需要记录Exception.ToString()–&gt;Exception.ToString()包含“堆栈跟踪”信息     </li>\n<li>catch要捕捉具体异常–&gt;好的代码只捕捉知道的异常      </li>\n<li>using使用–&gt;异常发生时，using能放在资源泄露              </li>\n<li>新异常应将原始异常作为其内部异常            </li>\n<li>catch抛出新异常会导致call stack丢失–&gt;不处理异常时可以“throw;”              </li>\n</ol>\n<h1 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h1><pre><code>public class SQLException : Exception\n{\n    public SQLException(string message) : base(message)\n    {\n    }\n}\n</code></pre><h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li><strong>应用程序处理未捕获的异常</strong>              </li>\n</ul>\n<pre><code>static void InitUnhandledException()\n{\n    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n}\nstatic void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)\n{\n    var exception = unhandledExceptionEventArgs.ExceptionObject as Exception;\n    //Log\n}\n</code></pre><blockquote>\n<p>未捕获的异常，通常就是运行时期的<strong>BUG</strong>，于是我们可以在UnhandledException的注册事件方法CurrentDomain_UnhandledException中将未捕获异常的信息<strong>记录在日志中</strong>。值得注意的是，UnhandledException提供的机制并不能阻止应用程序终止，也就是说，CurrentDomain_UnhandledException方法执行后，应用程序就会被终止。当然，这只是处理Console的未处理异常，还有更多<a href=\"http://www.cnblogs.com/luminji/archive/2011/01/05/1926033.html\" target=\"_blank\" rel=\"external\">相关细节</a>。          </p>\n</blockquote>\n<h1 id=\"异常报告–CrashReporter-NET功能介绍\"><a href=\"#异常报告–CrashReporter-NET功能介绍\" class=\"headerlink\" title=\"异常报告–CrashReporter.NET功能介绍\"></a>异常报告–CrashReporter.NET功能介绍</h1>"},{"title":"LinuxBase","date":"2017-11-19T04:38:40.000Z","_content":"# Linux初步介绍                    \n1. 特点：免费/开源、支持多用户、安全          \n2. linux最小内存需要4M        \n# 基本命令            \n1. 关机: shutdown -h now         \n2. 重启: shutdown -r now         \n3. 重启: reboot                  \n4. 进入图形界面: startx           \n5. 用户注销: logout              \n6. 切换身份: su                  \n7. 以管理员身份允许: sudo        \n8. 查看文件: ls/ls -la           \n9. 显示当前路径: pwd             \n10. 创建目录: mkdir             \n11. 删除目录: rmdir             \n12. 删除文件: rm                \n13. 建立空文件: touch           \n14. 复制: cp                    \n15. 移动文件: mv                \n16. 删除所有内容: rm -rf        \n17. 建立符号连接: ln            \n18. 显示文件内容，带分页: more/less     \n19. 在文本中查询内容: grep              \n20. 管道: |                            \n21. 搜索文件及目录: find                \n22. 重定向: >覆盖写；>>末尾添加；<反向传          \n23. 查看文件: cat\n# vi编辑器                              \n1. 创建文件: vi  文件名          \n2. 三种模式:1.Comandmode-->控制屏幕光标的移动，字符或光标的删除，移动复制某区段；2.Insertmode：-->文字数据输入;3.Lastline mode-->将储存文件或离开编辑器，也可设置编辑环境[命令总结](https://www.cnblogs.com/jiayongji/p/5771444.html)                      \n# Linux文件目录                    \n1. 特点: 级层式的树状目录结构                   \n2. 整体目录结构图                              \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/FileSystem.png?raw=true)                      \n3. root:存放root用户相关的文件               \n4. home:存放普通用户的相关文件               \n5. bin: 存放普通命令的目录                   \n6. sbin: 具有一定权限才能使用的命令          \n7. mnt: 默认挂载软驱和光驱的目录             \n8. usr: 用户软件默认安装位置                 \n9. boot: 存放引导相关的文件                  \n10. etc: 存放配置相关的文件                  \n11. var: 存放经常变化的文件                  \n# Linux用户管理                     \n1. 添加用户: useradd 用户名                  \n2. 设置密码: passwd 用户名                   \n3. 删除用户: userdel 用户名                  \n4. 删除用户及主目录: userdel -r 用户名       \n# Linux用户组和权限管理                \n1. Linux中每一个用户都属于某个组                    \n2. 添加组: groupadd 组名                           \n3. 查看所有组文件: /etc/group                      \n4. 创建用户并分配组: useradd -g 组名 用户名         \n5. 查看所有用户文件: /etc/passwd                   \n6. d|rwx|rwx|rwx:1.文件类型（文件-/文件夹d/链接l）；2.文件所有者对文件权限（读4/写2/可执行1）；3.文件所在组用户对文件的权限；4.其他组用户对文件的权限                     \n7. 改变权限: chmod,比如chmod 777 文件名          \n8. root改变用户组: usermod -g 组名 用户名        \n9. 修改文件所有者: chown 用户名 文件名           \n10. 修改文件所有组: chgrp 组名 文件名            \n# Linux常用技巧                  \n1. 运行级别:0-->关机；1-->单用户；2-->多用户，没有网络；3-->多用户，用网络；4-->系统保留；5-->图形界面；6-->系统重启。修改：/etc/inittab - id:5:initdefault:。如果配置错误，在进入grub引导页面按“e”，再按“e”，在grub输入1进入单用户模式修改                      \n2. 挂载/卸载分区文件: 1.挂载光驱: mount /mnt/cdrom/;2.卸载光驱: umount /mnt/cdrom;            \n3. Linux不由后缀区分可执行文件，有x权限的文件是可执行文件，执行可执行文件:./文件名               \n4. 安装压缩文件: tar -zxvf *.tar.gz             \n5. 硬盘分区: 1.主分区（系统所在分区）、扩展分区（不能直接使用，可分成若干个逻辑分区）；2.一块硬盘上，主分区和扩展分区总数不超过4个；3.Windows分区标识与目录对应，Linux硬盘分区与目录结构对应不明确，各分区都是挂载在目录树上；4.查看Linux分区情况：fdisk -l；5.查看目录挂载的分区: df 目录；6.查看磁盘使用情况: df -h                        \n5. Linux安装: 1.分区：/boot分区 100M；swap交换分区 一般是物理内存的两倍，不要大于256M；/根分区 尽可能大；2.swap相当于扩展内存，在系统的物理内存不够用的时候，该空间供当前运行的程序使用                                \n6. Linux Shell:1.查看当前使用的shell:env;2.修改shell:chsh -s 新的shell如/bin/csh                ","source":"_posts/LinuxBase.md","raw":"---\ntitle: LinuxBase\ndate: 2017-11-19 12:38:40\ntags: Linux\ncategories: Linux\n---\n# Linux初步介绍                    \n1. 特点：免费/开源、支持多用户、安全          \n2. linux最小内存需要4M        \n# 基本命令            \n1. 关机: shutdown -h now         \n2. 重启: shutdown -r now         \n3. 重启: reboot                  \n4. 进入图形界面: startx           \n5. 用户注销: logout              \n6. 切换身份: su                  \n7. 以管理员身份允许: sudo        \n8. 查看文件: ls/ls -la           \n9. 显示当前路径: pwd             \n10. 创建目录: mkdir             \n11. 删除目录: rmdir             \n12. 删除文件: rm                \n13. 建立空文件: touch           \n14. 复制: cp                    \n15. 移动文件: mv                \n16. 删除所有内容: rm -rf        \n17. 建立符号连接: ln            \n18. 显示文件内容，带分页: more/less     \n19. 在文本中查询内容: grep              \n20. 管道: |                            \n21. 搜索文件及目录: find                \n22. 重定向: >覆盖写；>>末尾添加；<反向传          \n23. 查看文件: cat\n# vi编辑器                              \n1. 创建文件: vi  文件名          \n2. 三种模式:1.Comandmode-->控制屏幕光标的移动，字符或光标的删除，移动复制某区段；2.Insertmode：-->文字数据输入;3.Lastline mode-->将储存文件或离开编辑器，也可设置编辑环境[命令总结](https://www.cnblogs.com/jiayongji/p/5771444.html)                      \n# Linux文件目录                    \n1. 特点: 级层式的树状目录结构                   \n2. 整体目录结构图                              \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/FileSystem.png?raw=true)                      \n3. root:存放root用户相关的文件               \n4. home:存放普通用户的相关文件               \n5. bin: 存放普通命令的目录                   \n6. sbin: 具有一定权限才能使用的命令          \n7. mnt: 默认挂载软驱和光驱的目录             \n8. usr: 用户软件默认安装位置                 \n9. boot: 存放引导相关的文件                  \n10. etc: 存放配置相关的文件                  \n11. var: 存放经常变化的文件                  \n# Linux用户管理                     \n1. 添加用户: useradd 用户名                  \n2. 设置密码: passwd 用户名                   \n3. 删除用户: userdel 用户名                  \n4. 删除用户及主目录: userdel -r 用户名       \n# Linux用户组和权限管理                \n1. Linux中每一个用户都属于某个组                    \n2. 添加组: groupadd 组名                           \n3. 查看所有组文件: /etc/group                      \n4. 创建用户并分配组: useradd -g 组名 用户名         \n5. 查看所有用户文件: /etc/passwd                   \n6. d|rwx|rwx|rwx:1.文件类型（文件-/文件夹d/链接l）；2.文件所有者对文件权限（读4/写2/可执行1）；3.文件所在组用户对文件的权限；4.其他组用户对文件的权限                     \n7. 改变权限: chmod,比如chmod 777 文件名          \n8. root改变用户组: usermod -g 组名 用户名        \n9. 修改文件所有者: chown 用户名 文件名           \n10. 修改文件所有组: chgrp 组名 文件名            \n# Linux常用技巧                  \n1. 运行级别:0-->关机；1-->单用户；2-->多用户，没有网络；3-->多用户，用网络；4-->系统保留；5-->图形界面；6-->系统重启。修改：/etc/inittab - id:5:initdefault:。如果配置错误，在进入grub引导页面按“e”，再按“e”，在grub输入1进入单用户模式修改                      \n2. 挂载/卸载分区文件: 1.挂载光驱: mount /mnt/cdrom/;2.卸载光驱: umount /mnt/cdrom;            \n3. Linux不由后缀区分可执行文件，有x权限的文件是可执行文件，执行可执行文件:./文件名               \n4. 安装压缩文件: tar -zxvf *.tar.gz             \n5. 硬盘分区: 1.主分区（系统所在分区）、扩展分区（不能直接使用，可分成若干个逻辑分区）；2.一块硬盘上，主分区和扩展分区总数不超过4个；3.Windows分区标识与目录对应，Linux硬盘分区与目录结构对应不明确，各分区都是挂载在目录树上；4.查看Linux分区情况：fdisk -l；5.查看目录挂载的分区: df 目录；6.查看磁盘使用情况: df -h                        \n5. Linux安装: 1.分区：/boot分区 100M；swap交换分区 一般是物理内存的两倍，不要大于256M；/根分区 尽可能大；2.swap相当于扩展内存，在系统的物理内存不够用的时候，该空间供当前运行的程序使用                                \n6. Linux Shell:1.查看当前使用的shell:env;2.修改shell:chsh -s 新的shell如/bin/csh                ","slug":"LinuxBase","published":1,"updated":"2017-11-19T04:44:32.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v3q0007tkui9cc63u62","content":"<h1 id=\"Linux初步介绍\"><a href=\"#Linux初步介绍\" class=\"headerlink\" title=\"Linux初步介绍\"></a>Linux初步介绍</h1><ol>\n<li>特点：免费/开源、支持多用户、安全          </li>\n<li>linux最小内存需要4M        <h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1></li>\n<li>关机: shutdown -h now         </li>\n<li>重启: shutdown -r now         </li>\n<li>重启: reboot                  </li>\n<li>进入图形界面: startx           </li>\n<li>用户注销: logout              </li>\n<li>切换身份: su                  </li>\n<li>以管理员身份允许: sudo        </li>\n<li>查看文件: ls/ls -la           </li>\n<li>显示当前路径: pwd             </li>\n<li>创建目录: mkdir             </li>\n<li>删除目录: rmdir             </li>\n<li>删除文件: rm                </li>\n<li>建立空文件: touch           </li>\n<li>复制: cp                    </li>\n<li>移动文件: mv                </li>\n<li>删除所有内容: rm -rf        </li>\n<li>建立符号连接: ln            </li>\n<li>显示文件内容，带分页: more/less     </li>\n<li>在文本中查询内容: grep              </li>\n<li>管道: |                            </li>\n<li>搜索文件及目录: find                </li>\n<li>重定向: &gt;覆盖写；&gt;&gt;末尾添加；&lt;反向传          </li>\n<li>查看文件: cat<h1 id=\"vi编辑器\"><a href=\"#vi编辑器\" class=\"headerlink\" title=\"vi编辑器\"></a>vi编辑器</h1></li>\n<li>创建文件: vi  文件名          </li>\n<li>三种模式:1.Comandmode–&gt;控制屏幕光标的移动，字符或光标的删除，移动复制某区段；2.Insertmode：–&gt;文字数据输入;3.Lastline mode–&gt;将储存文件或离开编辑器，也可设置编辑环境<a href=\"https://www.cnblogs.com/jiayongji/p/5771444.html\" target=\"_blank\" rel=\"external\">命令总结</a>                      <h1 id=\"Linux文件目录\"><a href=\"#Linux文件目录\" class=\"headerlink\" title=\"Linux文件目录\"></a>Linux文件目录</h1></li>\n<li>特点: 级层式的树状目录结构                   </li>\n<li>整体目录结构图<br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/FileSystem.png?raw=true\" alt=\"\">                      </li>\n<li>root:存放root用户相关的文件               </li>\n<li>home:存放普通用户的相关文件               </li>\n<li>bin: 存放普通命令的目录                   </li>\n<li>sbin: 具有一定权限才能使用的命令          </li>\n<li>mnt: 默认挂载软驱和光驱的目录             </li>\n<li>usr: 用户软件默认安装位置                 </li>\n<li>boot: 存放引导相关的文件                  </li>\n<li>etc: 存放配置相关的文件                  </li>\n<li>var: 存放经常变化的文件                  <h1 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h1></li>\n<li>添加用户: useradd 用户名                  </li>\n<li>设置密码: passwd 用户名                   </li>\n<li>删除用户: userdel 用户名                  </li>\n<li>删除用户及主目录: userdel -r 用户名       <h1 id=\"Linux用户组和权限管理\"><a href=\"#Linux用户组和权限管理\" class=\"headerlink\" title=\"Linux用户组和权限管理\"></a>Linux用户组和权限管理</h1></li>\n<li>Linux中每一个用户都属于某个组                    </li>\n<li>添加组: groupadd 组名                           </li>\n<li>查看所有组文件: /etc/group                      </li>\n<li>创建用户并分配组: useradd -g 组名 用户名         </li>\n<li>查看所有用户文件: /etc/passwd                   </li>\n<li>d|rwx|rwx|rwx:1.文件类型（文件-/文件夹d/链接l）；2.文件所有者对文件权限（读4/写2/可执行1）；3.文件所在组用户对文件的权限；4.其他组用户对文件的权限                     </li>\n<li>改变权限: chmod,比如chmod 777 文件名          </li>\n<li>root改变用户组: usermod -g 组名 用户名        </li>\n<li>修改文件所有者: chown 用户名 文件名           </li>\n<li>修改文件所有组: chgrp 组名 文件名            <h1 id=\"Linux常用技巧\"><a href=\"#Linux常用技巧\" class=\"headerlink\" title=\"Linux常用技巧\"></a>Linux常用技巧</h1></li>\n<li>运行级别:0–&gt;关机；1–&gt;单用户；2–&gt;多用户，没有网络；3–&gt;多用户，用网络；4–&gt;系统保留；5–&gt;图形界面；6–&gt;系统重启。修改：/etc/inittab - id:5:initdefault:。如果配置错误，在进入grub引导页面按“e”，再按“e”，在grub输入1进入单用户模式修改                      </li>\n<li>挂载/卸载分区文件: 1.挂载光驱: mount /mnt/cdrom/;2.卸载光驱: umount /mnt/cdrom;            </li>\n<li>Linux不由后缀区分可执行文件，有x权限的文件是可执行文件，执行可执行文件:./文件名               </li>\n<li>安装压缩文件: tar -zxvf *.tar.gz             </li>\n<li>硬盘分区: 1.主分区（系统所在分区）、扩展分区（不能直接使用，可分成若干个逻辑分区）；2.一块硬盘上，主分区和扩展分区总数不超过4个；3.Windows分区标识与目录对应，Linux硬盘分区与目录结构对应不明确，各分区都是挂载在目录树上；4.查看Linux分区情况：fdisk -l；5.查看目录挂载的分区: df 目录；6.查看磁盘使用情况: df -h                        </li>\n<li>Linux安装: 1.分区：/boot分区 100M；swap交换分区 一般是物理内存的两倍，不要大于256M；/根分区 尽可能大；2.swap相当于扩展内存，在系统的物理内存不够用的时候，该空间供当前运行的程序使用                                </li>\n<li>Linux Shell:1.查看当前使用的shell:env;2.修改shell:chsh -s 新的shell如/bin/csh                </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux初步介绍\"><a href=\"#Linux初步介绍\" class=\"headerlink\" title=\"Linux初步介绍\"></a>Linux初步介绍</h1><ol>\n<li>特点：免费/开源、支持多用户、安全          </li>\n<li>linux最小内存需要4M        <h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1></li>\n<li>关机: shutdown -h now         </li>\n<li>重启: shutdown -r now         </li>\n<li>重启: reboot                  </li>\n<li>进入图形界面: startx           </li>\n<li>用户注销: logout              </li>\n<li>切换身份: su                  </li>\n<li>以管理员身份允许: sudo        </li>\n<li>查看文件: ls/ls -la           </li>\n<li>显示当前路径: pwd             </li>\n<li>创建目录: mkdir             </li>\n<li>删除目录: rmdir             </li>\n<li>删除文件: rm                </li>\n<li>建立空文件: touch           </li>\n<li>复制: cp                    </li>\n<li>移动文件: mv                </li>\n<li>删除所有内容: rm -rf        </li>\n<li>建立符号连接: ln            </li>\n<li>显示文件内容，带分页: more/less     </li>\n<li>在文本中查询内容: grep              </li>\n<li>管道: |                            </li>\n<li>搜索文件及目录: find                </li>\n<li>重定向: &gt;覆盖写；&gt;&gt;末尾添加；&lt;反向传          </li>\n<li>查看文件: cat<h1 id=\"vi编辑器\"><a href=\"#vi编辑器\" class=\"headerlink\" title=\"vi编辑器\"></a>vi编辑器</h1></li>\n<li>创建文件: vi  文件名          </li>\n<li>三种模式:1.Comandmode–&gt;控制屏幕光标的移动，字符或光标的删除，移动复制某区段；2.Insertmode：–&gt;文字数据输入;3.Lastline mode–&gt;将储存文件或离开编辑器，也可设置编辑环境<a href=\"https://www.cnblogs.com/jiayongji/p/5771444.html\" target=\"_blank\" rel=\"external\">命令总结</a>                      <h1 id=\"Linux文件目录\"><a href=\"#Linux文件目录\" class=\"headerlink\" title=\"Linux文件目录\"></a>Linux文件目录</h1></li>\n<li>特点: 级层式的树状目录结构                   </li>\n<li>整体目录结构图<br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/FileSystem.png?raw=true\" alt=\"\">                      </li>\n<li>root:存放root用户相关的文件               </li>\n<li>home:存放普通用户的相关文件               </li>\n<li>bin: 存放普通命令的目录                   </li>\n<li>sbin: 具有一定权限才能使用的命令          </li>\n<li>mnt: 默认挂载软驱和光驱的目录             </li>\n<li>usr: 用户软件默认安装位置                 </li>\n<li>boot: 存放引导相关的文件                  </li>\n<li>etc: 存放配置相关的文件                  </li>\n<li>var: 存放经常变化的文件                  <h1 id=\"Linux用户管理\"><a href=\"#Linux用户管理\" class=\"headerlink\" title=\"Linux用户管理\"></a>Linux用户管理</h1></li>\n<li>添加用户: useradd 用户名                  </li>\n<li>设置密码: passwd 用户名                   </li>\n<li>删除用户: userdel 用户名                  </li>\n<li>删除用户及主目录: userdel -r 用户名       <h1 id=\"Linux用户组和权限管理\"><a href=\"#Linux用户组和权限管理\" class=\"headerlink\" title=\"Linux用户组和权限管理\"></a>Linux用户组和权限管理</h1></li>\n<li>Linux中每一个用户都属于某个组                    </li>\n<li>添加组: groupadd 组名                           </li>\n<li>查看所有组文件: /etc/group                      </li>\n<li>创建用户并分配组: useradd -g 组名 用户名         </li>\n<li>查看所有用户文件: /etc/passwd                   </li>\n<li>d|rwx|rwx|rwx:1.文件类型（文件-/文件夹d/链接l）；2.文件所有者对文件权限（读4/写2/可执行1）；3.文件所在组用户对文件的权限；4.其他组用户对文件的权限                     </li>\n<li>改变权限: chmod,比如chmod 777 文件名          </li>\n<li>root改变用户组: usermod -g 组名 用户名        </li>\n<li>修改文件所有者: chown 用户名 文件名           </li>\n<li>修改文件所有组: chgrp 组名 文件名            <h1 id=\"Linux常用技巧\"><a href=\"#Linux常用技巧\" class=\"headerlink\" title=\"Linux常用技巧\"></a>Linux常用技巧</h1></li>\n<li>运行级别:0–&gt;关机；1–&gt;单用户；2–&gt;多用户，没有网络；3–&gt;多用户，用网络；4–&gt;系统保留；5–&gt;图形界面；6–&gt;系统重启。修改：/etc/inittab - id:5:initdefault:。如果配置错误，在进入grub引导页面按“e”，再按“e”，在grub输入1进入单用户模式修改                      </li>\n<li>挂载/卸载分区文件: 1.挂载光驱: mount /mnt/cdrom/;2.卸载光驱: umount /mnt/cdrom;            </li>\n<li>Linux不由后缀区分可执行文件，有x权限的文件是可执行文件，执行可执行文件:./文件名               </li>\n<li>安装压缩文件: tar -zxvf *.tar.gz             </li>\n<li>硬盘分区: 1.主分区（系统所在分区）、扩展分区（不能直接使用，可分成若干个逻辑分区）；2.一块硬盘上，主分区和扩展分区总数不超过4个；3.Windows分区标识与目录对应，Linux硬盘分区与目录结构对应不明确，各分区都是挂载在目录树上；4.查看Linux分区情况：fdisk -l；5.查看目录挂载的分区: df 目录；6.查看磁盘使用情况: df -h                        </li>\n<li>Linux安装: 1.分区：/boot分区 100M；swap交换分区 一般是物理内存的两倍，不要大于256M；/根分区 尽可能大；2.swap相当于扩展内存，在系统的物理内存不够用的时候，该空间供当前运行的程序使用                                </li>\n<li>Linux Shell:1.查看当前使用的shell:env;2.修改shell:chsh -s 新的shell如/bin/csh                </li>\n</ol>\n"},{"title":"StrongName","date":"2017-11-13T03:32:00.000Z","_content":"","source":"_posts/StrongName.md","raw":"---\ntitle: StrongName\ndate: 2017-11-13 11:32:00\ntags:\n---\n","slug":"StrongName","published":1,"updated":"2017-11-13T03:32:00.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v3u0008tkuiuzb9isph","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C#中实现控件拖拽效果（How to DragDrop Control in C#）","date":"2017-10-29T13:41:48.000Z","_content":"> 当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。  \n拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。  \n下面介绍用C#实现控件拖拽，并通过剪切板交换数据。  \n\n# **控件拖拽触发/响应函数**\n对于拖拽的对象，需要在**MouseDown**或**ItemDrag**中调用**DoDragDrop**，传递要拖拽的数据对象并触发拖拽。总的来说，当用户调用DoDragDrop方法后，就进入到一个循环中。 循环会一直跟踪鼠标，检查鼠标所在的窗体是否实现IDropTarget，如果实现了则：调用**DropEnter**，并通过调用GiveFeedBack来显示效果；鼠标在控件上时，调用**DropOver**，也是通过GiveFeedBack来显示效果；在拖拽过程中，键盘或鼠标按键发生变化，可以通过QueryContinueDrag来检查是否能继续操作，根据不同的返回结果，调用**DropOver**或**DropLeave**；鼠标释放时触发**DragDrop**事件，执行拖拽逻辑。\n* **DragEnter、DragOver、DragLeave事件**   \n**触发：** 当用鼠标拖拽一个对象到控件的窗口时，首先触发DragEnter，然后是DragOver，拖放对象悬浮于拖放区域，在拖放区域内移动时多次触发DragOver，当离开窗体时触发DragLeave。  \n**作用：** 设置判断对象是否是要接受的类型以及鼠标的样式。\n* **DragDrop事件**  \n**触发：** 当用户拖拽对象到控件上，并释放时触发。  \n**作用：** 接受拖拽数据，实现拖拽逻辑  \n\n# **实现控件拖拽的典型流程**\n1. **设置AllowDrop**  \n在对一个控件进行拖拽编程时，我们必须把AllowDrop属性设置为True\n2. **拖动对象触发DragDrop**    \n\n```  \nprivate void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n    this.listBox1.DoDragDrop(\"Drag Data\", DragDropEffects.Move);\n}\n```    \n\n3. **拖到目标响应DragDrop**   \n\n```    \nprivate void listBox2_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    if (e.Data.GetDataPresent(DataFormats.Text))\n    {\n        //设置DragDrop效果\n        e.Effect = DragDropEffects.Move;\n    }\n}\n\nprivate void listBox2_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    //执行DragDrop逻辑\n    this.listBox2.Items.Add(e.Data.GetData(DataFormats.Text));\n    this.listBox1.Items.Remove(e.Data.GetData(DataFormats.Text));\n}\n```      \n\n# **控件拖拽的参数**    \n\n```  \npublic DragDropEffects DoDragDrop ( Object data,DragDropEffects allowedEffects)\n```       \n\n* **data：**户所要拖动的数据内容。必须将所要拖动的内容传入到这个方法的第一个参数位置。并不是必须的，比如在不同应用间传递数据时，可以借由[剪切板](https://xiong-ang.github.io/2017/10/29/clipboard/)。  \n# **控件拖拽的特效**\n控件拖拽的特效由DragDropEffects枚举来指定。\n* **DragDropEffects说明**  \n\n成员名称 | 说明\n- | :-\nAll\t| Copy、Move 和 Scroll 效果的组合  \nCopy | 将拖动源中的数据复制到放置目标，图标为一个框右上角带+\nLink | 将拖动源中的数据链接到放置目标，图标为数据快捷图标\nMove | 将拖动源的数据移动到放置目标，图标为一个框\nNone | 放置目标不接受该数据，图标为禁止标识\nScroll | 拖动时，如果有滚动条目，可以滚动目标，以定位在目标中当前不可见的某个放置位置  \n\n# **[[Demo](https://github.com/xiong-ang/CShape_SLN)]**\n* **界面**  \n![](https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true)\n* **功能**  \n实现文件的拖拽以及应用程序之间的拖拽。","source":"_posts/dragdrop.md","raw":"---\ntitle: C#中实现控件拖拽效果（How to DragDrop Control in C#）\ndate: 2017-10-29 21:41:48\ntags: [DragDrop, C#]\ncategories: C#\n---\n> 当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。  \n拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。  \n下面介绍用C#实现控件拖拽，并通过剪切板交换数据。  \n\n# **控件拖拽触发/响应函数**\n对于拖拽的对象，需要在**MouseDown**或**ItemDrag**中调用**DoDragDrop**，传递要拖拽的数据对象并触发拖拽。总的来说，当用户调用DoDragDrop方法后，就进入到一个循环中。 循环会一直跟踪鼠标，检查鼠标所在的窗体是否实现IDropTarget，如果实现了则：调用**DropEnter**，并通过调用GiveFeedBack来显示效果；鼠标在控件上时，调用**DropOver**，也是通过GiveFeedBack来显示效果；在拖拽过程中，键盘或鼠标按键发生变化，可以通过QueryContinueDrag来检查是否能继续操作，根据不同的返回结果，调用**DropOver**或**DropLeave**；鼠标释放时触发**DragDrop**事件，执行拖拽逻辑。\n* **DragEnter、DragOver、DragLeave事件**   \n**触发：** 当用鼠标拖拽一个对象到控件的窗口时，首先触发DragEnter，然后是DragOver，拖放对象悬浮于拖放区域，在拖放区域内移动时多次触发DragOver，当离开窗体时触发DragLeave。  \n**作用：** 设置判断对象是否是要接受的类型以及鼠标的样式。\n* **DragDrop事件**  \n**触发：** 当用户拖拽对象到控件上，并释放时触发。  \n**作用：** 接受拖拽数据，实现拖拽逻辑  \n\n# **实现控件拖拽的典型流程**\n1. **设置AllowDrop**  \n在对一个控件进行拖拽编程时，我们必须把AllowDrop属性设置为True\n2. **拖动对象触发DragDrop**    \n\n```  \nprivate void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n    this.listBox1.DoDragDrop(\"Drag Data\", DragDropEffects.Move);\n}\n```    \n\n3. **拖到目标响应DragDrop**   \n\n```    \nprivate void listBox2_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    if (e.Data.GetDataPresent(DataFormats.Text))\n    {\n        //设置DragDrop效果\n        e.Effect = DragDropEffects.Move;\n    }\n}\n\nprivate void listBox2_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    //执行DragDrop逻辑\n    this.listBox2.Items.Add(e.Data.GetData(DataFormats.Text));\n    this.listBox1.Items.Remove(e.Data.GetData(DataFormats.Text));\n}\n```      \n\n# **控件拖拽的参数**    \n\n```  \npublic DragDropEffects DoDragDrop ( Object data,DragDropEffects allowedEffects)\n```       \n\n* **data：**户所要拖动的数据内容。必须将所要拖动的内容传入到这个方法的第一个参数位置。并不是必须的，比如在不同应用间传递数据时，可以借由[剪切板](https://xiong-ang.github.io/2017/10/29/clipboard/)。  \n# **控件拖拽的特效**\n控件拖拽的特效由DragDropEffects枚举来指定。\n* **DragDropEffects说明**  \n\n成员名称 | 说明\n- | :-\nAll\t| Copy、Move 和 Scroll 效果的组合  \nCopy | 将拖动源中的数据复制到放置目标，图标为一个框右上角带+\nLink | 将拖动源中的数据链接到放置目标，图标为数据快捷图标\nMove | 将拖动源的数据移动到放置目标，图标为一个框\nNone | 放置目标不接受该数据，图标为禁止标识\nScroll | 拖动时，如果有滚动条目，可以滚动目标，以定位在目标中当前不可见的某个放置位置  \n\n# **[[Demo](https://github.com/xiong-ang/CShape_SLN)]**\n* **界面**  \n![](https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true)\n* **功能**  \n实现文件的拖拽以及应用程序之间的拖拽。","slug":"dragdrop","published":1,"updated":"2017-11-05T04:15:09.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v42000btkui3m8q4962","content":"<blockquote>\n<p>当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。<br>拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。<br>下面介绍用C#实现控件拖拽，并通过剪切板交换数据。  </p>\n</blockquote>\n<h1 id=\"控件拖拽触发-响应函数\"><a href=\"#控件拖拽触发-响应函数\" class=\"headerlink\" title=\"控件拖拽触发/响应函数\"></a><strong>控件拖拽触发/响应函数</strong></h1><p>对于拖拽的对象，需要在<strong>MouseDown</strong>或<strong>ItemDrag</strong>中调用<strong>DoDragDrop</strong>，传递要拖拽的数据对象并触发拖拽。总的来说，当用户调用DoDragDrop方法后，就进入到一个循环中。 循环会一直跟踪鼠标，检查鼠标所在的窗体是否实现IDropTarget，如果实现了则：调用<strong>DropEnter</strong>，并通过调用GiveFeedBack来显示效果；鼠标在控件上时，调用<strong>DropOver</strong>，也是通过GiveFeedBack来显示效果；在拖拽过程中，键盘或鼠标按键发生变化，可以通过QueryContinueDrag来检查是否能继续操作，根据不同的返回结果，调用<strong>DropOver</strong>或<strong>DropLeave</strong>；鼠标释放时触发<strong>DragDrop</strong>事件，执行拖拽逻辑。</p>\n<ul>\n<li><strong>DragEnter、DragOver、DragLeave事件</strong><br><strong>触发：</strong> 当用鼠标拖拽一个对象到控件的窗口时，首先触发DragEnter，然后是DragOver，拖放对象悬浮于拖放区域，在拖放区域内移动时多次触发DragOver，当离开窗体时触发DragLeave。<br><strong>作用：</strong> 设置判断对象是否是要接受的类型以及鼠标的样式。</li>\n<li><strong>DragDrop事件</strong><br><strong>触发：</strong> 当用户拖拽对象到控件上，并释放时触发。<br><strong>作用：</strong> 接受拖拽数据，实现拖拽逻辑  </li>\n</ul>\n<h1 id=\"实现控件拖拽的典型流程\"><a href=\"#实现控件拖拽的典型流程\" class=\"headerlink\" title=\"实现控件拖拽的典型流程\"></a><strong>实现控件拖拽的典型流程</strong></h1><ol>\n<li><strong>设置AllowDrop</strong><br>在对一个控件进行拖拽编程时，我们必须把AllowDrop属性设置为True</li>\n<li><strong>拖动对象触发DragDrop</strong>    </li>\n</ol>\n<pre><code>private void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n    this.listBox1.DoDragDrop(&quot;Drag Data&quot;, DragDropEffects.Move);\n}\n</code></pre><ol>\n<li><strong>拖到目标响应DragDrop</strong>   </li>\n</ol>\n<pre><code>private void listBox2_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    if (e.Data.GetDataPresent(DataFormats.Text))\n    {\n        //设置DragDrop效果\n        e.Effect = DragDropEffects.Move;\n    }\n}\n\nprivate void listBox2_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    //执行DragDrop逻辑\n    this.listBox2.Items.Add(e.Data.GetData(DataFormats.Text));\n    this.listBox1.Items.Remove(e.Data.GetData(DataFormats.Text));\n}\n</code></pre><h1 id=\"控件拖拽的参数\"><a href=\"#控件拖拽的参数\" class=\"headerlink\" title=\"控件拖拽的参数\"></a><strong>控件拖拽的参数</strong></h1><pre><code>public DragDropEffects DoDragDrop ( Object data,DragDropEffects allowedEffects)\n</code></pre><ul>\n<li><strong>data：</strong>户所要拖动的数据内容。必须将所要拖动的内容传入到这个方法的第一个参数位置。并不是必须的，比如在不同应用间传递数据时，可以借由<a href=\"https://xiong-ang.github.io/2017/10/29/clipboard/\" target=\"_blank\" rel=\"external\">剪切板</a>。  <h1 id=\"控件拖拽的特效\"><a href=\"#控件拖拽的特效\" class=\"headerlink\" title=\"控件拖拽的特效\"></a><strong>控件拖拽的特效</strong></h1>控件拖拽的特效由DragDropEffects枚举来指定。</li>\n<li><strong>DragDropEffects说明</strong>  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>成员名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>All</td>\n<td style=\"text-align:left\">Copy、Move 和 Scroll 效果的组合  </td>\n</tr>\n<tr>\n<td>Copy</td>\n<td style=\"text-align:left\">将拖动源中的数据复制到放置目标，图标为一个框右上角带+</td>\n</tr>\n<tr>\n<td>Link</td>\n<td style=\"text-align:left\">将拖动源中的数据链接到放置目标，图标为数据快捷图标</td>\n</tr>\n<tr>\n<td>Move</td>\n<td style=\"text-align:left\">将拖动源的数据移动到放置目标，图标为一个框</td>\n</tr>\n<tr>\n<td>None</td>\n<td style=\"text-align:left\">放置目标不接受该数据，图标为禁止标识</td>\n</tr>\n<tr>\n<td>Scroll</td>\n<td style=\"text-align:left\">拖动时，如果有滚动条目，可以滚动目标，以定位在目标中当前不可见的某个放置位置  </td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"[Demo]\"></a><strong>[<a href=\"https://github.com/xiong-ang/CShape_SLN\" target=\"_blank\" rel=\"external\">Demo</a>]</strong></h1><ul>\n<li><strong>界面</strong><br><img src=\"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true\" alt=\"\"></li>\n<li><strong>功能</strong><br>实现文件的拖拽以及应用程序之间的拖拽。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。<br>拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。<br>下面介绍用C#实现控件拖拽，并通过剪切板交换数据。  </p>\n</blockquote>\n<h1 id=\"控件拖拽触发-响应函数\"><a href=\"#控件拖拽触发-响应函数\" class=\"headerlink\" title=\"控件拖拽触发/响应函数\"></a><strong>控件拖拽触发/响应函数</strong></h1><p>对于拖拽的对象，需要在<strong>MouseDown</strong>或<strong>ItemDrag</strong>中调用<strong>DoDragDrop</strong>，传递要拖拽的数据对象并触发拖拽。总的来说，当用户调用DoDragDrop方法后，就进入到一个循环中。 循环会一直跟踪鼠标，检查鼠标所在的窗体是否实现IDropTarget，如果实现了则：调用<strong>DropEnter</strong>，并通过调用GiveFeedBack来显示效果；鼠标在控件上时，调用<strong>DropOver</strong>，也是通过GiveFeedBack来显示效果；在拖拽过程中，键盘或鼠标按键发生变化，可以通过QueryContinueDrag来检查是否能继续操作，根据不同的返回结果，调用<strong>DropOver</strong>或<strong>DropLeave</strong>；鼠标释放时触发<strong>DragDrop</strong>事件，执行拖拽逻辑。</p>\n<ul>\n<li><strong>DragEnter、DragOver、DragLeave事件</strong><br><strong>触发：</strong> 当用鼠标拖拽一个对象到控件的窗口时，首先触发DragEnter，然后是DragOver，拖放对象悬浮于拖放区域，在拖放区域内移动时多次触发DragOver，当离开窗体时触发DragLeave。<br><strong>作用：</strong> 设置判断对象是否是要接受的类型以及鼠标的样式。</li>\n<li><strong>DragDrop事件</strong><br><strong>触发：</strong> 当用户拖拽对象到控件上，并释放时触发。<br><strong>作用：</strong> 接受拖拽数据，实现拖拽逻辑  </li>\n</ul>\n<h1 id=\"实现控件拖拽的典型流程\"><a href=\"#实现控件拖拽的典型流程\" class=\"headerlink\" title=\"实现控件拖拽的典型流程\"></a><strong>实现控件拖拽的典型流程</strong></h1><ol>\n<li><strong>设置AllowDrop</strong><br>在对一个控件进行拖拽编程时，我们必须把AllowDrop属性设置为True</li>\n<li><strong>拖动对象触发DragDrop</strong>    </li>\n</ol>\n<pre><code>private void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n    this.listBox1.DoDragDrop(&quot;Drag Data&quot;, DragDropEffects.Move);\n}\n</code></pre><ol>\n<li><strong>拖到目标响应DragDrop</strong>   </li>\n</ol>\n<pre><code>private void listBox2_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    if (e.Data.GetDataPresent(DataFormats.Text))\n    {\n        //设置DragDrop效果\n        e.Effect = DragDropEffects.Move;\n    }\n}\n\nprivate void listBox2_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)\n{\n    //执行DragDrop逻辑\n    this.listBox2.Items.Add(e.Data.GetData(DataFormats.Text));\n    this.listBox1.Items.Remove(e.Data.GetData(DataFormats.Text));\n}\n</code></pre><h1 id=\"控件拖拽的参数\"><a href=\"#控件拖拽的参数\" class=\"headerlink\" title=\"控件拖拽的参数\"></a><strong>控件拖拽的参数</strong></h1><pre><code>public DragDropEffects DoDragDrop ( Object data,DragDropEffects allowedEffects)\n</code></pre><ul>\n<li><strong>data：</strong>户所要拖动的数据内容。必须将所要拖动的内容传入到这个方法的第一个参数位置。并不是必须的，比如在不同应用间传递数据时，可以借由<a href=\"https://xiong-ang.github.io/2017/10/29/clipboard/\" target=\"_blank\" rel=\"external\">剪切板</a>。  <h1 id=\"控件拖拽的特效\"><a href=\"#控件拖拽的特效\" class=\"headerlink\" title=\"控件拖拽的特效\"></a><strong>控件拖拽的特效</strong></h1>控件拖拽的特效由DragDropEffects枚举来指定。</li>\n<li><strong>DragDropEffects说明</strong>  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>成员名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>All</td>\n<td style=\"text-align:left\">Copy、Move 和 Scroll 效果的组合  </td>\n</tr>\n<tr>\n<td>Copy</td>\n<td style=\"text-align:left\">将拖动源中的数据复制到放置目标，图标为一个框右上角带+</td>\n</tr>\n<tr>\n<td>Link</td>\n<td style=\"text-align:left\">将拖动源中的数据链接到放置目标，图标为数据快捷图标</td>\n</tr>\n<tr>\n<td>Move</td>\n<td style=\"text-align:left\">将拖动源的数据移动到放置目标，图标为一个框</td>\n</tr>\n<tr>\n<td>None</td>\n<td style=\"text-align:left\">放置目标不接受该数据，图标为禁止标识</td>\n</tr>\n<tr>\n<td>Scroll</td>\n<td style=\"text-align:left\">拖动时，如果有滚动条目，可以滚动目标，以定位在目标中当前不可见的某个放置位置  </td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"[Demo]\"></a><strong>[<a href=\"https://github.com/xiong-ang/CShape_SLN\" target=\"_blank\" rel=\"external\">Demo</a>]</strong></h1><ul>\n<li><strong>界面</strong><br><img src=\"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true\" alt=\"\"></li>\n<li><strong>功能</strong><br>实现文件的拖拽以及应用程序之间的拖拽。</li>\n</ul>\n"},{"title":"wpf_mvvm","date":"2017-11-11T12:54:53.000Z","_content":"","source":"_posts/wpf-mvvm.md","raw":"---\ntitle: wpf_mvvm\ndate: 2017-11-11 20:54:53\ntags:\n---\n","slug":"wpf-mvvm","published":1,"updated":"2017-11-11T12:54:53.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v46000ctkuisave3kww","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"log4net","date":"2017-11-11T12:55:20.000Z","_content":"","source":"_posts/log4net.md","raw":"---\ntitle: log4net\ndate: 2017-11-11 20:55:20\ntags:\n---\n","slug":"log4net","published":1,"updated":"2017-11-11T12:55:20.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v4b000gtkuic6rso3oj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"知识积累规划","date":"2017-10-31T11:29:51.000Z","_content":"> 重要的东西需要记录下来，尤其是对于一个应届毕业生的头几年的规划。  \n入职已经四个月了，公司开发Windows桌面产品，人文环境好，活不多，对技术要求不高，相对单一，需要对产品了解。感觉自己每个星期的代码量都不超过100行，细极思恐。  \n在这种环境下如何提高自己，成为目前主要思考的问题。  \n***考虑自身兴趣，决定从三个方面提高自己：***  \n* **基础知识**  \n1 产品知识  \n2 C#知识  \n3 英语\n> 这部分知识放在工作中学习，坚持**每周有一个C#或者产品的研究主题**，每周进行针对**研究主题一次总结**。英语坚持**听听力**、**背单词**。 \n* **兴趣拓展**  \n1 web前后端\n2 机器学习  \n> 项目激励法，**每周研究一个相关的项目**，动手实践，做后总结。 \n* **技能提高**  \n1 算法  \n2 构架\n> 在看书的过程中，每周针对一个主题，进行研究与实践。  \n\n***任务总结***  \n1 每周研究并总结一个C#或产品相关的主题，根据实际工作情况确定主题。  \n2 每周做一个兴趣拓展项目，项目根据上一周总结，或者直接是书本一章。  \n3 每周研究书上的一些主题。\n# **静下心，慢慢沉淀**\n# *希望自己不负好青春~~*","source":"_posts/goal.md","raw":"---\ntitle: 知识积累规划\ndate: 2017-10-31 19:29:51\ntags: goal\n---\n> 重要的东西需要记录下来，尤其是对于一个应届毕业生的头几年的规划。  \n入职已经四个月了，公司开发Windows桌面产品，人文环境好，活不多，对技术要求不高，相对单一，需要对产品了解。感觉自己每个星期的代码量都不超过100行，细极思恐。  \n在这种环境下如何提高自己，成为目前主要思考的问题。  \n***考虑自身兴趣，决定从三个方面提高自己：***  \n* **基础知识**  \n1 产品知识  \n2 C#知识  \n3 英语\n> 这部分知识放在工作中学习，坚持**每周有一个C#或者产品的研究主题**，每周进行针对**研究主题一次总结**。英语坚持**听听力**、**背单词**。 \n* **兴趣拓展**  \n1 web前后端\n2 机器学习  \n> 项目激励法，**每周研究一个相关的项目**，动手实践，做后总结。 \n* **技能提高**  \n1 算法  \n2 构架\n> 在看书的过程中，每周针对一个主题，进行研究与实践。  \n\n***任务总结***  \n1 每周研究并总结一个C#或产品相关的主题，根据实际工作情况确定主题。  \n2 每周做一个兴趣拓展项目，项目根据上一周总结，或者直接是书本一章。  \n3 每周研究书上的一些主题。\n# **静下心，慢慢沉淀**\n# *希望自己不负好青春~~*","slug":"goal","published":1,"updated":"2017-10-31T12:24:22.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v4e000itkuiczw57vac","content":"<blockquote>\n<p>重要的东西需要记录下来，尤其是对于一个应届毕业生的头几年的规划。<br>入职已经四个月了，公司开发Windows桌面产品，人文环境好，活不多，对技术要求不高，相对单一，需要对产品了解。感觉自己每个星期的代码量都不超过100行，细极思恐。<br>在这种环境下如何提高自己，成为目前主要思考的问题。<br><strong><em>考虑自身兴趣，决定从三个方面提高自己：</em></strong>  </p>\n<ul>\n<li><strong>基础知识</strong><br>1 产品知识<br>2 C#知识<br>3 英语<br>这部分知识放在工作中学习，坚持<strong>每周有一个C#或者产品的研究主题</strong>，每周进行针对<strong>研究主题一次总结</strong>。英语坚持<strong>听听力</strong>、<strong>背单词</strong>。 </li>\n<li><strong>兴趣拓展</strong><br>1 web前后端<br>2 机器学习<br>项目激励法，<strong>每周研究一个相关的项目</strong>，动手实践，做后总结。 </li>\n<li><strong>技能提高</strong><br>1 算法<br>2 构架<br>在看书的过程中，每周针对一个主题，进行研究与实践。  </li>\n</ul>\n</blockquote>\n<p><strong><em>任务总结</em></strong><br>1 每周研究并总结一个C#或产品相关的主题，根据实际工作情况确定主题。<br>2 每周做一个兴趣拓展项目，项目根据上一周总结，或者直接是书本一章。<br>3 每周研究书上的一些主题。</p>\n<h1 id=\"静下心，慢慢沉淀\"><a href=\"#静下心，慢慢沉淀\" class=\"headerlink\" title=\"静下心，慢慢沉淀\"></a><strong>静下心，慢慢沉淀</strong></h1><h1 id=\"希望自己不负好青春\"><a href=\"#希望自己不负好青春\" class=\"headerlink\" title=\"希望自己不负好青春~~\"></a><em>希望自己不负好青春~~</em></h1>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>重要的东西需要记录下来，尤其是对于一个应届毕业生的头几年的规划。<br>入职已经四个月了，公司开发Windows桌面产品，人文环境好，活不多，对技术要求不高，相对单一，需要对产品了解。感觉自己每个星期的代码量都不超过100行，细极思恐。<br>在这种环境下如何提高自己，成为目前主要思考的问题。<br><strong><em>考虑自身兴趣，决定从三个方面提高自己：</em></strong>  </p>\n<ul>\n<li><strong>基础知识</strong><br>1 产品知识<br>2 C#知识<br>3 英语<br>这部分知识放在工作中学习，坚持<strong>每周有一个C#或者产品的研究主题</strong>，每周进行针对<strong>研究主题一次总结</strong>。英语坚持<strong>听听力</strong>、<strong>背单词</strong>。 </li>\n<li><strong>兴趣拓展</strong><br>1 web前后端<br>2 机器学习<br>项目激励法，<strong>每周研究一个相关的项目</strong>，动手实践，做后总结。 </li>\n<li><strong>技能提高</strong><br>1 算法<br>2 构架<br>在看书的过程中，每周针对一个主题，进行研究与实践。  </li>\n</ul>\n</blockquote>\n<p><strong><em>任务总结</em></strong><br>1 每周研究并总结一个C#或产品相关的主题，根据实际工作情况确定主题。<br>2 每周做一个兴趣拓展项目，项目根据上一周总结，或者直接是书本一章。<br>3 每周研究书上的一些主题。</p>\n<h1 id=\"静下心，慢慢沉淀\"><a href=\"#静下心，慢慢沉淀\" class=\"headerlink\" title=\"静下心，慢慢沉淀\"></a><strong>静下心，慢慢沉淀</strong></h1><h1 id=\"希望自己不负好青春\"><a href=\"#希望自己不负好青春\" class=\"headerlink\" title=\"希望自己不负好青春~~\"></a><em>希望自己不负好青春~~</em></h1>"},{"title":"继电器-->Pico控制器-->可编程控制器PLC","date":"2017-11-05T04:35:45.000Z","_content":"# 继电器    \n\n  继电器（英文名称：relay）是一种电控制器件，是当输入量（激励量）的变化达到规定要求时，在电气输出电路中使被控量发生预定的阶跃变化的一种电器。  \n  它具有控制系统（又称输入回路）和被控制系统（又称输出回路）之间的互动关系。    \n  通常应用于自动化的控制电路中，它实际上是用小电流去控制大电流运作的一种自动开关。故在电路中起着自动调节、安全保护、转换电路等作用。     \n  \n# Pico控制器     \n  Pico是一种紧凑、友好、廉价的控制器，提供简单的逻辑、定时、计数和实时时钟操作。    \n  为增强性能，Pico GFX增加了图形画面的使用,提供高级编程特征:如PID控制,高速计数器，以及位序列。     \n  Pico是替代继电器应用的理想选择，适合于简单控制应用，如楼宇、暖通空调、停车场照明以及一些对成本要求很严的场合。     \n  Pico控制器所有的编程和数据调整都能够通过面板上的键盘和显示来完成，或者利用Allen-Bradley的PicoSoft和PicoSoft Pro配置软件来完成。     \n  \n# 可编程控制器PLC    \n  可编程控制器（Programmable Logic Controller）简称PLC，是一种通用的工业控制装置，其组成与一般的微机系统基本相似。     \n  它采用可以编制程序的存储器，用来在执行存储逻辑运算和顺序控制、定时、计数和算术运算等操作的指令，并通过数字或模拟的输入(I)和输出(O)接口，控制各种类型的机械设备或生产过程。PLC基本组成如下图所示：      \n  ![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_base.PNG?raw=true)      \n  可编程控制器是在电器控制技术和计算机技术的基础上开发出来的，并逐渐发展成为以微处理器为核心，把自动化技术、计算机技术、通讯技术融为一体的新型工业控制装置。PLC工作过程如下图所示：       \n  ![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_Work.PNG?raw=true)     \n  目前，PLC已被广泛应用于各种生产机械和生产过程的自动控制中，成为一种最重要、最普及、应用场合最多的工业控制装置，被公认为现代工业自动化的三大支柱（PLC、机器人、CAD/CAM）之一。    \n# Rockwell系列PLC               \n\n## Logix系统控制器类型         \n* ControlLogix控制器            \n* CompactLogix控制器              \n* FlexLogix控制器            \n* SoftLogix控制器          \n* DriveLogix控制器                \n\n## Logix系统常见硬件类型           \n* 机架\t  \n（1）1756-A4/B、1756-A7/B、1756-A10/B、1756-A13/B、1756-A17/B     \n（2）4槽、7槽、10槽、13槽、17槽机架        \n* 电源模块\t     \n（1）非冗余（1756-PA72，1756-PB72，1756-PA75，1756-PB75）      \n冗余（1756-PA75R，1756- PB75R）       \n（2）1756-PA72 电源（220VAC/5VDC 10A）      \n     1756-PA75 电源（220VAC/5VDC 13A）       \n     1756-PB72 电源（24VDC/5VDC 10A）         \n     1756-PB75 电源（24VDC/5VDC 13A）         \n* CPU模块\t       \n（1）1756-L55系列，1756-L55M12、1756-L55M16、1756-L55M22、1756-L55M24            \n（2）1756-L6x系列，1756-L61、1756-L62、1756-L63、1756-L65           \n（3）1756-L7x系列，1756-L71、1756-L72、1756-L73、1756-L75               \n* 通讯模块\t       \nEtherNet通讯模块，1756-ENBT、1756-EN2T、1756-EN2TR             \n  ControlNet通讯模块，1756-CNB、1756-CNBR、1756-CN2、1756-CN2R            \n  DeviceNet通讯模块，1756-DNB             \n* DI模块\t           \n（1）1756-IB16，1756-IB32（12/24V DC）              \n（2）1756-IM16I（220V AC）                 \n* DO模块\t                   \n（1）1756-OB8、1756-OB16、1756-OB32（12/24V DC）\n* AI模块                  \n  常规，1756-IF8、1756-IF16             \n  热电阻模块，1756-IR6I               \n  热电偶模块，1756-IT6I              \n* AO模块\t           \n（1）1756-OF4、1756-OF8、1756-IF4FXOF2F              \n* 其他\t          \n（1）1756-HSC，高速计数器模块\n\n## ControlLogix硬件特性                    \n* 框架：      1756-A7/B（本地7槽机架）、1756-A10/B（远程10槽机架）          \n* 控制器型号：1756-L****                       \n* 电源模块：\t1756-PA72/C，120/240VAC，50/60Hz                 \n* 通讯模块：  1756-ENBT，1756-CN2R,1756-CNBR,1756-DNB          \n* I/O模块：\t  \n1756-IR6I，    6通道，热电阻模块             \n1756-IF8，\t    8通道，模拟量输入模块          \n1756-OF8，    8通道，模拟量输出模块               \n1756-IT6I，\t    6通道，热电偶模块             \n1756-IB16，    16点，数字量输入模块（DC24V）             \n1756-OB16E，  16点，数字量输出模块（DC24V）              \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/AIO.PNG?raw=true)     \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/DIO.PNG?raw=true)    \n* 通讯方式：RS232/DH-485串口通讯、EtherNet网络通讯         \n* DC24V电源：AB-1606-XL          \n* 其他：1756-HSC 高速计数 1756-PLS 限位控制 \n* 系统设计目标：将多种控制方式集成在单一的控制器上，集成了顺序控制、运动控制、传动控制、过程控制。      \n            \n## CompactLogix硬件特性           \n* 框架：\t\t无\n* 处理器：\t\t1769-L***    \n* 电源模块：\t1769-PA4，120/240VAC，50/60Hz     \n* 通讯模块：  1769-SDN，DeviceNet网络适配器     \n* I/O模块：\t\n1769-IF8，      8通道，模拟量输入模块       \n1769-IQ16，    16点，数字量输入模块（DC24V）        \n1769-OF4CI，   4通道，模拟量输出模块             \n1769-OB16，\t 16点，数字量输出模块（DC24V）              \n* 通讯方式：RS232/DH-485串口通信、EtherNet网络通讯\n* DC24V电源：AB-1606-XL\n\n","source":"_posts/Controller.md","raw":"---\ntitle: 继电器-->Pico控制器-->可编程控制器PLC\ndate: 2017-11-05 12:35:45\ntags: Controller\ncategories: Product\n---\n# 继电器    \n\n  继电器（英文名称：relay）是一种电控制器件，是当输入量（激励量）的变化达到规定要求时，在电气输出电路中使被控量发生预定的阶跃变化的一种电器。  \n  它具有控制系统（又称输入回路）和被控制系统（又称输出回路）之间的互动关系。    \n  通常应用于自动化的控制电路中，它实际上是用小电流去控制大电流运作的一种自动开关。故在电路中起着自动调节、安全保护、转换电路等作用。     \n  \n# Pico控制器     \n  Pico是一种紧凑、友好、廉价的控制器，提供简单的逻辑、定时、计数和实时时钟操作。    \n  为增强性能，Pico GFX增加了图形画面的使用,提供高级编程特征:如PID控制,高速计数器，以及位序列。     \n  Pico是替代继电器应用的理想选择，适合于简单控制应用，如楼宇、暖通空调、停车场照明以及一些对成本要求很严的场合。     \n  Pico控制器所有的编程和数据调整都能够通过面板上的键盘和显示来完成，或者利用Allen-Bradley的PicoSoft和PicoSoft Pro配置软件来完成。     \n  \n# 可编程控制器PLC    \n  可编程控制器（Programmable Logic Controller）简称PLC，是一种通用的工业控制装置，其组成与一般的微机系统基本相似。     \n  它采用可以编制程序的存储器，用来在执行存储逻辑运算和顺序控制、定时、计数和算术运算等操作的指令，并通过数字或模拟的输入(I)和输出(O)接口，控制各种类型的机械设备或生产过程。PLC基本组成如下图所示：      \n  ![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_base.PNG?raw=true)      \n  可编程控制器是在电器控制技术和计算机技术的基础上开发出来的，并逐渐发展成为以微处理器为核心，把自动化技术、计算机技术、通讯技术融为一体的新型工业控制装置。PLC工作过程如下图所示：       \n  ![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_Work.PNG?raw=true)     \n  目前，PLC已被广泛应用于各种生产机械和生产过程的自动控制中，成为一种最重要、最普及、应用场合最多的工业控制装置，被公认为现代工业自动化的三大支柱（PLC、机器人、CAD/CAM）之一。    \n# Rockwell系列PLC               \n\n## Logix系统控制器类型         \n* ControlLogix控制器            \n* CompactLogix控制器              \n* FlexLogix控制器            \n* SoftLogix控制器          \n* DriveLogix控制器                \n\n## Logix系统常见硬件类型           \n* 机架\t  \n（1）1756-A4/B、1756-A7/B、1756-A10/B、1756-A13/B、1756-A17/B     \n（2）4槽、7槽、10槽、13槽、17槽机架        \n* 电源模块\t     \n（1）非冗余（1756-PA72，1756-PB72，1756-PA75，1756-PB75）      \n冗余（1756-PA75R，1756- PB75R）       \n（2）1756-PA72 电源（220VAC/5VDC 10A）      \n     1756-PA75 电源（220VAC/5VDC 13A）       \n     1756-PB72 电源（24VDC/5VDC 10A）         \n     1756-PB75 电源（24VDC/5VDC 13A）         \n* CPU模块\t       \n（1）1756-L55系列，1756-L55M12、1756-L55M16、1756-L55M22、1756-L55M24            \n（2）1756-L6x系列，1756-L61、1756-L62、1756-L63、1756-L65           \n（3）1756-L7x系列，1756-L71、1756-L72、1756-L73、1756-L75               \n* 通讯模块\t       \nEtherNet通讯模块，1756-ENBT、1756-EN2T、1756-EN2TR             \n  ControlNet通讯模块，1756-CNB、1756-CNBR、1756-CN2、1756-CN2R            \n  DeviceNet通讯模块，1756-DNB             \n* DI模块\t           \n（1）1756-IB16，1756-IB32（12/24V DC）              \n（2）1756-IM16I（220V AC）                 \n* DO模块\t                   \n（1）1756-OB8、1756-OB16、1756-OB32（12/24V DC）\n* AI模块                  \n  常规，1756-IF8、1756-IF16             \n  热电阻模块，1756-IR6I               \n  热电偶模块，1756-IT6I              \n* AO模块\t           \n（1）1756-OF4、1756-OF8、1756-IF4FXOF2F              \n* 其他\t          \n（1）1756-HSC，高速计数器模块\n\n## ControlLogix硬件特性                    \n* 框架：      1756-A7/B（本地7槽机架）、1756-A10/B（远程10槽机架）          \n* 控制器型号：1756-L****                       \n* 电源模块：\t1756-PA72/C，120/240VAC，50/60Hz                 \n* 通讯模块：  1756-ENBT，1756-CN2R,1756-CNBR,1756-DNB          \n* I/O模块：\t  \n1756-IR6I，    6通道，热电阻模块             \n1756-IF8，\t    8通道，模拟量输入模块          \n1756-OF8，    8通道，模拟量输出模块               \n1756-IT6I，\t    6通道，热电偶模块             \n1756-IB16，    16点，数字量输入模块（DC24V）             \n1756-OB16E，  16点，数字量输出模块（DC24V）              \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/AIO.PNG?raw=true)     \n![](https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/DIO.PNG?raw=true)    \n* 通讯方式：RS232/DH-485串口通讯、EtherNet网络通讯         \n* DC24V电源：AB-1606-XL          \n* 其他：1756-HSC 高速计数 1756-PLS 限位控制 \n* 系统设计目标：将多种控制方式集成在单一的控制器上，集成了顺序控制、运动控制、传动控制、过程控制。      \n            \n## CompactLogix硬件特性           \n* 框架：\t\t无\n* 处理器：\t\t1769-L***    \n* 电源模块：\t1769-PA4，120/240VAC，50/60Hz     \n* 通讯模块：  1769-SDN，DeviceNet网络适配器     \n* I/O模块：\t\n1769-IF8，      8通道，模拟量输入模块       \n1769-IQ16，    16点，数字量输入模块（DC24V）        \n1769-OF4CI，   4通道，模拟量输出模块             \n1769-OB16，\t 16点，数字量输出模块（DC24V）              \n* 通讯方式：RS232/DH-485串口通信、EtherNet网络通讯\n* DC24V电源：AB-1606-XL\n\n","slug":"Controller","published":1,"updated":"2017-11-05T05:25:37.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v4i000ntkuic1nz7jbt","content":"<h1 id=\"继电器\"><a href=\"#继电器\" class=\"headerlink\" title=\"继电器\"></a>继电器</h1><p>  继电器（英文名称：relay）是一种电控制器件，是当输入量（激励量）的变化达到规定要求时，在电气输出电路中使被控量发生预定的阶跃变化的一种电器。<br>  它具有控制系统（又称输入回路）和被控制系统（又称输出回路）之间的互动关系。<br>  通常应用于自动化的控制电路中，它实际上是用小电流去控制大电流运作的一种自动开关。故在电路中起着自动调节、安全保护、转换电路等作用。     </p>\n<h1 id=\"Pico控制器\"><a href=\"#Pico控制器\" class=\"headerlink\" title=\"Pico控制器\"></a>Pico控制器</h1><p>  Pico是一种紧凑、友好、廉价的控制器，提供简单的逻辑、定时、计数和实时时钟操作。<br>  为增强性能，Pico GFX增加了图形画面的使用,提供高级编程特征:如PID控制,高速计数器，以及位序列。<br>  Pico是替代继电器应用的理想选择，适合于简单控制应用，如楼宇、暖通空调、停车场照明以及一些对成本要求很严的场合。<br>  Pico控制器所有的编程和数据调整都能够通过面板上的键盘和显示来完成，或者利用Allen-Bradley的PicoSoft和PicoSoft Pro配置软件来完成。     </p>\n<h1 id=\"可编程控制器PLC\"><a href=\"#可编程控制器PLC\" class=\"headerlink\" title=\"可编程控制器PLC\"></a>可编程控制器PLC</h1><p>  可编程控制器（Programmable Logic Controller）简称PLC，是一种通用的工业控制装置，其组成与一般的微机系统基本相似。<br>  它采用可以编制程序的存储器，用来在执行存储逻辑运算和顺序控制、定时、计数和算术运算等操作的指令，并通过数字或模拟的输入(I)和输出(O)接口，控制各种类型的机械设备或生产过程。PLC基本组成如下图所示：<br>  <img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_base.PNG?raw=true\" alt=\"\"><br>  可编程控制器是在电器控制技术和计算机技术的基础上开发出来的，并逐渐发展成为以微处理器为核心，把自动化技术、计算机技术、通讯技术融为一体的新型工业控制装置。PLC工作过程如下图所示：<br>  <img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_Work.PNG?raw=true\" alt=\"\"><br>  目前，PLC已被广泛应用于各种生产机械和生产过程的自动控制中，成为一种最重要、最普及、应用场合最多的工业控制装置，被公认为现代工业自动化的三大支柱（PLC、机器人、CAD/CAM）之一。    </p>\n<h1 id=\"Rockwell系列PLC\"><a href=\"#Rockwell系列PLC\" class=\"headerlink\" title=\"Rockwell系列PLC\"></a>Rockwell系列PLC</h1><h2 id=\"Logix系统控制器类型\"><a href=\"#Logix系统控制器类型\" class=\"headerlink\" title=\"Logix系统控制器类型\"></a>Logix系统控制器类型</h2><ul>\n<li>ControlLogix控制器            </li>\n<li>CompactLogix控制器              </li>\n<li>FlexLogix控制器            </li>\n<li>SoftLogix控制器          </li>\n<li>DriveLogix控制器                </li>\n</ul>\n<h2 id=\"Logix系统常见硬件类型\"><a href=\"#Logix系统常见硬件类型\" class=\"headerlink\" title=\"Logix系统常见硬件类型\"></a>Logix系统常见硬件类型</h2><ul>\n<li>机架<br>（1）1756-A4/B、1756-A7/B、1756-A10/B、1756-A13/B、1756-A17/B<br>（2）4槽、7槽、10槽、13槽、17槽机架        </li>\n<li>电源模块<br>（1）非冗余（1756-PA72，1756-PB72，1756-PA75，1756-PB75）<br>冗余（1756-PA75R，1756- PB75R）<br>（2）1756-PA72 电源（220VAC/5VDC 10A）<br>   1756-PA75 电源（220VAC/5VDC 13A）<br>   1756-PB72 电源（24VDC/5VDC 10A）<br>   1756-PB75 电源（24VDC/5VDC 13A）         </li>\n<li>CPU模块<br>（1）1756-L55系列，1756-L55M12、1756-L55M16、1756-L55M22、1756-L55M24<br>（2）1756-L6x系列，1756-L61、1756-L62、1756-L63、1756-L65<br>（3）1756-L7x系列，1756-L71、1756-L72、1756-L73、1756-L75               </li>\n<li>通讯模块<br>EtherNet通讯模块，1756-ENBT、1756-EN2T、1756-EN2TR<br>ControlNet通讯模块，1756-CNB、1756-CNBR、1756-CN2、1756-CN2R<br>DeviceNet通讯模块，1756-DNB             </li>\n<li>DI模块<br>（1）1756-IB16，1756-IB32（12/24V DC）<br>（2）1756-IM16I（220V AC）                 </li>\n<li>DO模块<br>（1）1756-OB8、1756-OB16、1756-OB32（12/24V DC）</li>\n<li>AI模块<br>常规，1756-IF8、1756-IF16<br>热电阻模块，1756-IR6I<br>热电偶模块，1756-IT6I              </li>\n<li>AO模块<br>（1）1756-OF4、1756-OF8、1756-IF4FXOF2F              </li>\n<li>其他<br>（1）1756-HSC，高速计数器模块</li>\n</ul>\n<h2 id=\"ControlLogix硬件特性\"><a href=\"#ControlLogix硬件特性\" class=\"headerlink\" title=\"ControlLogix硬件特性\"></a>ControlLogix硬件特性</h2><ul>\n<li>框架：      1756-A7/B（本地7槽机架）、1756-A10/B（远程10槽机架）          </li>\n<li>控制器型号：1756-L<em>**</em>                       </li>\n<li>电源模块：    1756-PA72/C，120/240VAC，50/60Hz                 </li>\n<li>通讯模块：  1756-ENBT，1756-CN2R,1756-CNBR,1756-DNB          </li>\n<li>I/O模块：<br>1756-IR6I，    6通道，热电阻模块<br>1756-IF8，        8通道，模拟量输入模块<br>1756-OF8，    8通道，模拟量输出模块<br>1756-IT6I，        6通道，热电偶模块<br>1756-IB16，    16点，数字量输入模块（DC24V）<br>1756-OB16E，  16点，数字量输出模块（DC24V）<br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/AIO.PNG?raw=true\" alt=\"\"><br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/DIO.PNG?raw=true\" alt=\"\">    </li>\n<li>通讯方式：RS232/DH-485串口通讯、EtherNet网络通讯         </li>\n<li>DC24V电源：AB-1606-XL          </li>\n<li>其他：1756-HSC 高速计数 1756-PLS 限位控制 </li>\n<li>系统设计目标：将多种控制方式集成在单一的控制器上，集成了顺序控制、运动控制、传动控制、过程控制。      </li>\n</ul>\n<h2 id=\"CompactLogix硬件特性\"><a href=\"#CompactLogix硬件特性\" class=\"headerlink\" title=\"CompactLogix硬件特性\"></a>CompactLogix硬件特性</h2><ul>\n<li>框架：        无</li>\n<li>处理器：        1769-L<em>*</em>    </li>\n<li>电源模块：    1769-PA4，120/240VAC，50/60Hz     </li>\n<li>通讯模块：  1769-SDN，DeviceNet网络适配器     </li>\n<li>I/O模块：<br>1769-IF8，      8通道，模拟量输入模块<br>1769-IQ16，    16点，数字量输入模块（DC24V）<br>1769-OF4CI，   4通道，模拟量输出模块<br>1769-OB16，     16点，数字量输出模块（DC24V）              </li>\n<li>通讯方式：RS232/DH-485串口通信、EtherNet网络通讯</li>\n<li>DC24V电源：AB-1606-XL</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"继电器\"><a href=\"#继电器\" class=\"headerlink\" title=\"继电器\"></a>继电器</h1><p>  继电器（英文名称：relay）是一种电控制器件，是当输入量（激励量）的变化达到规定要求时，在电气输出电路中使被控量发生预定的阶跃变化的一种电器。<br>  它具有控制系统（又称输入回路）和被控制系统（又称输出回路）之间的互动关系。<br>  通常应用于自动化的控制电路中，它实际上是用小电流去控制大电流运作的一种自动开关。故在电路中起着自动调节、安全保护、转换电路等作用。     </p>\n<h1 id=\"Pico控制器\"><a href=\"#Pico控制器\" class=\"headerlink\" title=\"Pico控制器\"></a>Pico控制器</h1><p>  Pico是一种紧凑、友好、廉价的控制器，提供简单的逻辑、定时、计数和实时时钟操作。<br>  为增强性能，Pico GFX增加了图形画面的使用,提供高级编程特征:如PID控制,高速计数器，以及位序列。<br>  Pico是替代继电器应用的理想选择，适合于简单控制应用，如楼宇、暖通空调、停车场照明以及一些对成本要求很严的场合。<br>  Pico控制器所有的编程和数据调整都能够通过面板上的键盘和显示来完成，或者利用Allen-Bradley的PicoSoft和PicoSoft Pro配置软件来完成。     </p>\n<h1 id=\"可编程控制器PLC\"><a href=\"#可编程控制器PLC\" class=\"headerlink\" title=\"可编程控制器PLC\"></a>可编程控制器PLC</h1><p>  可编程控制器（Programmable Logic Controller）简称PLC，是一种通用的工业控制装置，其组成与一般的微机系统基本相似。<br>  它采用可以编制程序的存储器，用来在执行存储逻辑运算和顺序控制、定时、计数和算术运算等操作的指令，并通过数字或模拟的输入(I)和输出(O)接口，控制各种类型的机械设备或生产过程。PLC基本组成如下图所示：<br>  <img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_base.PNG?raw=true\" alt=\"\"><br>  可编程控制器是在电器控制技术和计算机技术的基础上开发出来的，并逐渐发展成为以微处理器为核心，把自动化技术、计算机技术、通讯技术融为一体的新型工业控制装置。PLC工作过程如下图所示：<br>  <img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/PLC_Work.PNG?raw=true\" alt=\"\"><br>  目前，PLC已被广泛应用于各种生产机械和生产过程的自动控制中，成为一种最重要、最普及、应用场合最多的工业控制装置，被公认为现代工业自动化的三大支柱（PLC、机器人、CAD/CAM）之一。    </p>\n<h1 id=\"Rockwell系列PLC\"><a href=\"#Rockwell系列PLC\" class=\"headerlink\" title=\"Rockwell系列PLC\"></a>Rockwell系列PLC</h1><h2 id=\"Logix系统控制器类型\"><a href=\"#Logix系统控制器类型\" class=\"headerlink\" title=\"Logix系统控制器类型\"></a>Logix系统控制器类型</h2><ul>\n<li>ControlLogix控制器            </li>\n<li>CompactLogix控制器              </li>\n<li>FlexLogix控制器            </li>\n<li>SoftLogix控制器          </li>\n<li>DriveLogix控制器                </li>\n</ul>\n<h2 id=\"Logix系统常见硬件类型\"><a href=\"#Logix系统常见硬件类型\" class=\"headerlink\" title=\"Logix系统常见硬件类型\"></a>Logix系统常见硬件类型</h2><ul>\n<li>机架<br>（1）1756-A4/B、1756-A7/B、1756-A10/B、1756-A13/B、1756-A17/B<br>（2）4槽、7槽、10槽、13槽、17槽机架        </li>\n<li>电源模块<br>（1）非冗余（1756-PA72，1756-PB72，1756-PA75，1756-PB75）<br>冗余（1756-PA75R，1756- PB75R）<br>（2）1756-PA72 电源（220VAC/5VDC 10A）<br>   1756-PA75 电源（220VAC/5VDC 13A）<br>   1756-PB72 电源（24VDC/5VDC 10A）<br>   1756-PB75 电源（24VDC/5VDC 13A）         </li>\n<li>CPU模块<br>（1）1756-L55系列，1756-L55M12、1756-L55M16、1756-L55M22、1756-L55M24<br>（2）1756-L6x系列，1756-L61、1756-L62、1756-L63、1756-L65<br>（3）1756-L7x系列，1756-L71、1756-L72、1756-L73、1756-L75               </li>\n<li>通讯模块<br>EtherNet通讯模块，1756-ENBT、1756-EN2T、1756-EN2TR<br>ControlNet通讯模块，1756-CNB、1756-CNBR、1756-CN2、1756-CN2R<br>DeviceNet通讯模块，1756-DNB             </li>\n<li>DI模块<br>（1）1756-IB16，1756-IB32（12/24V DC）<br>（2）1756-IM16I（220V AC）                 </li>\n<li>DO模块<br>（1）1756-OB8、1756-OB16、1756-OB32（12/24V DC）</li>\n<li>AI模块<br>常规，1756-IF8、1756-IF16<br>热电阻模块，1756-IR6I<br>热电偶模块，1756-IT6I              </li>\n<li>AO模块<br>（1）1756-OF4、1756-OF8、1756-IF4FXOF2F              </li>\n<li>其他<br>（1）1756-HSC，高速计数器模块</li>\n</ul>\n<h2 id=\"ControlLogix硬件特性\"><a href=\"#ControlLogix硬件特性\" class=\"headerlink\" title=\"ControlLogix硬件特性\"></a>ControlLogix硬件特性</h2><ul>\n<li>框架：      1756-A7/B（本地7槽机架）、1756-A10/B（远程10槽机架）          </li>\n<li>控制器型号：1756-L<em>**</em>                       </li>\n<li>电源模块：    1756-PA72/C，120/240VAC，50/60Hz                 </li>\n<li>通讯模块：  1756-ENBT，1756-CN2R,1756-CNBR,1756-DNB          </li>\n<li>I/O模块：<br>1756-IR6I，    6通道，热电阻模块<br>1756-IF8，        8通道，模拟量输入模块<br>1756-OF8，    8通道，模拟量输出模块<br>1756-IT6I，        6通道，热电偶模块<br>1756-IB16，    16点，数字量输入模块（DC24V）<br>1756-OB16E，  16点，数字量输出模块（DC24V）<br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/AIO.PNG?raw=true\" alt=\"\"><br><img src=\"https://github.com/xiong-ang/xiong-ang.github.io/blob/Hexo/MyBlog/MyBlog/images/DIO.PNG?raw=true\" alt=\"\">    </li>\n<li>通讯方式：RS232/DH-485串口通讯、EtherNet网络通讯         </li>\n<li>DC24V电源：AB-1606-XL          </li>\n<li>其他：1756-HSC 高速计数 1756-PLS 限位控制 </li>\n<li>系统设计目标：将多种控制方式集成在单一的控制器上，集成了顺序控制、运动控制、传动控制、过程控制。      </li>\n</ul>\n<h2 id=\"CompactLogix硬件特性\"><a href=\"#CompactLogix硬件特性\" class=\"headerlink\" title=\"CompactLogix硬件特性\"></a>CompactLogix硬件特性</h2><ul>\n<li>框架：        无</li>\n<li>处理器：        1769-L<em>*</em>    </li>\n<li>电源模块：    1769-PA4，120/240VAC，50/60Hz     </li>\n<li>通讯模块：  1769-SDN，DeviceNet网络适配器     </li>\n<li>I/O模块：<br>1769-IF8，      8通道，模拟量输入模块<br>1769-IQ16，    16点，数字量输入模块（DC24V）<br>1769-OF4CI，   4通道，模拟量输出模块<br>1769-OB16，     16点，数字量输出模块（DC24V）              </li>\n<li>通讯方式：RS232/DH-485串口通信、EtherNet网络通讯</li>\n<li>DC24V电源：AB-1606-XL</li>\n</ul>\n"},{"title":"C# Clipboard使用（How to Use Clipboard in C#）","date":"2017-10-29T13:41:31.000Z","_content":"# **Clipboard引荐**\n> Clipboard，即剪切板，当我们同时按动Ctrl＋C时，选定的对象就被存放在了剪切板中了。如果刚才选定的对象是文件，那么在定盘符后，按动Ctrl＋V键或者点击菜单“粘贴”，这时选定的文件就保存到指定的磁盘上面了；如果选定的对象是图象，那么在打开“画图”之后，按动Ctrl＋V键或者点击菜单“粘贴”，图象就会显示在画图中了；如果是文本，那么在打开文本编辑器后，按动Ctrl＋V键或者点击菜单“粘贴”，这时文本就会显示在文本编辑器中。当然选定的对象还有许多种，这就不一一举例了。上面这些操作其实就是剪切板几种典型的操作。那么这些操作如果用Visual C＃来实现到底是个什么样子？  \n微软引入**Clipboard类**进行处理，我们先来介绍[MSDN](https://msdn.microsoft.com/zh-cn/library/system.windows.forms.clipboard.aspx)上的一个例子进入今天的讨论。   \n\n```        \n/*\n下述代码放置文本数据进入Clipboard，并从中在提取出来。\nWinfrm代码界面元素包括：button1, button2, textBox1, textBox2\n*/\n\nprivate void button1_Click(object sender, System.EventArgs e) {\n    //button1_Click 调用SetDataObject将textBox1中选中的文字放入系统剪切板\n\n    if(textBox1.SelectedText != \"\")\n       Clipboard.SetDataObject(textBox1.SelectedText);\n    else\n       textBox2.Text = \"No text selected in textBox1\";\n }\n\n private void button2_Click(object sender, System.EventArgs e) {\n    //button2_Click 调用GetDataObject从系统剪切板提取数据\n\n    IDataObject iData = Clipboard.GetDataObject();\n\n    //判断是否有Text数据格式\n    if(iData.GetDataPresent(DataFormats.Text)) {\n       textBox2.Text = (String)iData.GetData(DataFormats.Text); \n    }\n    else {\n       textBox2.Text = \"Could not retrieve data off the clipboard.\";\n    }\n }\n```     \n\n从这个例子可以学到Clipboard的最基本用法：用SetDataObjec将数据存入系统剪切板；用GetDataObject从系统剪切板获取数据。  \n\n# **使用Clipboard保存/获取各种媒体**   \n\n以实际操作的经验，剪切板不仅可以拷贝文字，还可以拷贝图片、文件，当然，通过程序，还可以让Clipboard保存音频和自定义类型。下面针对这些功能分别加以介绍。  \n\n* **Clipboard保存多媒体**      \n\n\n```       \nclass ClipboardDataFormat\n{\n    public static readonly string TEXT=\"Text\";\n    public static readonly string IMAGE=\"Image\";\n    public static readonly string FILEDROP=\"FileDrop\";\n    public static readonly string AUDIO=\"Audio\";\n    public static readonly string USERDEFINED=\"UserDefined\";\n}\n\nclass ClipboardProcesser\n{\n    public static void SetDataToClipboard(object o, string type)\n    {\n        try\n        {\n            if (o != null)\n            {\n                if (type == ClipboardDataFormat.TEXT)\n                {\n                    Clipboard.SetText((string)o);\n                }\n                if (type == ClipboardDataFormat.FILEDROP)\n                {\n                    Clipboard.SetFileDropList((System.Collections.Specialized.StringCollection)o);\n                }\n                if (type == ClipboardDataFormat.IMAGE)\n                {\n                    Clipboard.SetImage((System.Drawing.Image)o);\n                }\n                if (type == ClipboardDataFormat.AUDIO)\n                {\n                    Clipboard.SetAudio((Stream)o);\n                }\n                if (type == ClipboardDataFormat.USERDEFINED)\n                {\n                    MyItem item = (MyItem)o;\n                    item.ToClipboard();\n                }\n            }\n        }\n        catch (Exception)\n        {\n        }\n    }\n```     \n\n```      \n//自定义要往剪切板添加的类型\n[Serializable]\npublic class MyItem\n{\n    public string ItemName { get; set; }\n    public object ItemData { get; set; }\n    \n    public void ToClipboard()\n    {\n        DataFormats.Format format = DataFormats.GetFormat(ClipboardDataFormat.USERDEFINED);\n\n        IDataObject dataObj = new DataObject();\n        dataObj.SetData(format.Name, false, this);\n        Clipboard.SetDataObject(dataObj, false);\n    }\n}\n```      \n\n* **Clipboard获取多媒体**     \n\n```      \npublic static object GetDataFromClipboardByType(string type)\n    {\n        object retObj = null;\n        try\n        {\n            if (type == ClipboardDataFormat.TEXT)\n            {\n                retObj = Clipboard.GetText();\n            }\n            if (type == ClipboardDataFormat.FILEDROP)\n            {\n                retObj = Clipboard.GetFileDropList();\n            }\n            if (type == ClipboardDataFormat.IMAGE)\n            {\n                retObj = Clipboard.GetImage();\n            }\n            if (type == ClipboardDataFormat.AUDIO)\n            {\n                retObj = Clipboard.GetAudioStream();\n            }\n            if (type == ClipboardDataFormat.USERDEFINED)\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                retObj = (MyItem)iData.GetData(type);\n            }                \n        }\n        catch (Exception)\n        {\n            retObj = null;\n        }\n        return retObj;\n    }\n\n    public static string GetDataTypeFromClipboard()\n    {\n        string type = string.Empty;\n\n        try\n        {\n            if (Clipboard.ContainsText())\n            {\n                type = ClipboardDataFormat.TEXT;\n            }\n            else if (Clipboard.ContainsFileDropList())\n            {\n                type = ClipboardDataFormat.FILEDROP;\n            }\n            else if (Clipboard.ContainsImage())\n            {\n                type = ClipboardDataFormat.IMAGE;\n            }\n            else if (Clipboard.ContainsAudio())\n            {\n                type = ClipboardDataFormat.AUDIO;\n            }\n            else\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                if (iData.GetDataPresent(ClipboardDataFormat.USERDEFINED))\n                {\n                    type = ClipboardDataFormat.USERDEFINED;\n                } \n            }\n        }\n        catch (Exception)\n        {\n        }\n        return type;\n    }\n}\n```     \n\n# **让窗体自动响应Clipboard的变化**   \n\n让窗体自动响应Clipboard的变化这是一个非常酷的功能，实现这个需求并不难，大致分四步：   \n\n* **Form类中引入三个函数**     \n\n```      \n// SetClipboardViewer 用于往观察链中添加一个窗口句柄，这个窗口就可成为观察链中的一员了，返回值指向下一个观察者\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern IntPtr SetClipboardViewer(IntPtr hwnd);\n\n//ChangeClipboardChain删除由hwnd指定的观察链成员，这是一个窗口句柄，第二个参数hWndNext是观察链中下一个窗口的句柄\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern IntPtr ChangeClipboardChain(IntPtr hwnd,IntPtr hWndNext);\n\n//SendMessage 发送消息\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern int SendMessage(IntPtr hwnd,int wMsg,IntPtr wParam,IntPtr lParam);\n\n//Clipboard内容变化消息\nconst int WM_DRAWCLIPBOARD = 0x308;\n//Clipboard观察链变化消息\nconst int WM_CHANGECBCHAIN = 0x30D;\n```     \n\n* **Form_Load中把窗口添加到观察链中成为观察者，并保存下一个观察者的句柄**     \n\n```     \n//存放观察链中下一个窗口句柄   \nIntPtr NextClipHwnd;\nprivate void Form_Load(object sender, System.EventArgs e)\n{  \n     //获得观察链中下一个窗口句柄\n    NextClipHwnd=SetClipboardViewer(this.Handle);           \n}\n```     \n\n* **重载WndProc方法，监视剪切板，并处理，并把剪切板变化的消息发送给下一个观察者**     \n\n```      \nprotected override void WndProc(ref System.Windows.Forms.Message m)\n{\n    switch(m.Msg)\n    {\n        case WM_DRAWCLIPBOARD:\n            //将WM_DRAWCLIPBOARD消息传递到下一个观察链中的窗口\n            SendMessage(NextClipHwnd,m.Msg,m.WParam,m.LParam);\n\n            //获取Clipboard内容，并处理\n            IDataObject iData = Clipboard.GetDataObject();\n            ...\n            ...\n            break;\n        default:\n            base.WndProc(ref m);\n            break;\n    }       \n}\n```     \n\n* **Form_Closed中撤消自己定义的观察者，并通知下一个观察者**      \n\n```     \nprivate void Form_Closed(object sender, System.EventArgs e)\n{\n    //从观察链中删除本观察窗口\n    ChangeClipboardChain(this.Handle,NextClipHwnd);\n    //将变动消息WM_CHANGECBCHAIN消息传递到下一个观察链中的窗口\n    SendMessage(NextClipHwnd,WM_CHANGECBCHAIN,this.Handle,NextClipHwnd);  \n}\n```       \n\n# **解决Clipboard冲突**   \n* 待补充       \n\n# **[[Demo](https://github.com/xiong-ang/CShape_SLN)]**   \n* **界面**   \n![Alt text](https://github.com/xiong-ang/CShape_SLN/blob/master/Image/ClipBoard.PNG?raw=true)     \n\n* **功能**   \n自动捕捉剪切板变化，并显示其中的文字、图片、文件以及自定义类型。","source":"_posts/clipboard.md","raw":"---\ntitle: C# Clipboard使用（How to Use Clipboard in C#）\ndate: 2017-10-29 21:41:31\ntags: [Clipboard, C#]\ncategories: C#\n---\n# **Clipboard引荐**\n> Clipboard，即剪切板，当我们同时按动Ctrl＋C时，选定的对象就被存放在了剪切板中了。如果刚才选定的对象是文件，那么在定盘符后，按动Ctrl＋V键或者点击菜单“粘贴”，这时选定的文件就保存到指定的磁盘上面了；如果选定的对象是图象，那么在打开“画图”之后，按动Ctrl＋V键或者点击菜单“粘贴”，图象就会显示在画图中了；如果是文本，那么在打开文本编辑器后，按动Ctrl＋V键或者点击菜单“粘贴”，这时文本就会显示在文本编辑器中。当然选定的对象还有许多种，这就不一一举例了。上面这些操作其实就是剪切板几种典型的操作。那么这些操作如果用Visual C＃来实现到底是个什么样子？  \n微软引入**Clipboard类**进行处理，我们先来介绍[MSDN](https://msdn.microsoft.com/zh-cn/library/system.windows.forms.clipboard.aspx)上的一个例子进入今天的讨论。   \n\n```        \n/*\n下述代码放置文本数据进入Clipboard，并从中在提取出来。\nWinfrm代码界面元素包括：button1, button2, textBox1, textBox2\n*/\n\nprivate void button1_Click(object sender, System.EventArgs e) {\n    //button1_Click 调用SetDataObject将textBox1中选中的文字放入系统剪切板\n\n    if(textBox1.SelectedText != \"\")\n       Clipboard.SetDataObject(textBox1.SelectedText);\n    else\n       textBox2.Text = \"No text selected in textBox1\";\n }\n\n private void button2_Click(object sender, System.EventArgs e) {\n    //button2_Click 调用GetDataObject从系统剪切板提取数据\n\n    IDataObject iData = Clipboard.GetDataObject();\n\n    //判断是否有Text数据格式\n    if(iData.GetDataPresent(DataFormats.Text)) {\n       textBox2.Text = (String)iData.GetData(DataFormats.Text); \n    }\n    else {\n       textBox2.Text = \"Could not retrieve data off the clipboard.\";\n    }\n }\n```     \n\n从这个例子可以学到Clipboard的最基本用法：用SetDataObjec将数据存入系统剪切板；用GetDataObject从系统剪切板获取数据。  \n\n# **使用Clipboard保存/获取各种媒体**   \n\n以实际操作的经验，剪切板不仅可以拷贝文字，还可以拷贝图片、文件，当然，通过程序，还可以让Clipboard保存音频和自定义类型。下面针对这些功能分别加以介绍。  \n\n* **Clipboard保存多媒体**      \n\n\n```       \nclass ClipboardDataFormat\n{\n    public static readonly string TEXT=\"Text\";\n    public static readonly string IMAGE=\"Image\";\n    public static readonly string FILEDROP=\"FileDrop\";\n    public static readonly string AUDIO=\"Audio\";\n    public static readonly string USERDEFINED=\"UserDefined\";\n}\n\nclass ClipboardProcesser\n{\n    public static void SetDataToClipboard(object o, string type)\n    {\n        try\n        {\n            if (o != null)\n            {\n                if (type == ClipboardDataFormat.TEXT)\n                {\n                    Clipboard.SetText((string)o);\n                }\n                if (type == ClipboardDataFormat.FILEDROP)\n                {\n                    Clipboard.SetFileDropList((System.Collections.Specialized.StringCollection)o);\n                }\n                if (type == ClipboardDataFormat.IMAGE)\n                {\n                    Clipboard.SetImage((System.Drawing.Image)o);\n                }\n                if (type == ClipboardDataFormat.AUDIO)\n                {\n                    Clipboard.SetAudio((Stream)o);\n                }\n                if (type == ClipboardDataFormat.USERDEFINED)\n                {\n                    MyItem item = (MyItem)o;\n                    item.ToClipboard();\n                }\n            }\n        }\n        catch (Exception)\n        {\n        }\n    }\n```     \n\n```      \n//自定义要往剪切板添加的类型\n[Serializable]\npublic class MyItem\n{\n    public string ItemName { get; set; }\n    public object ItemData { get; set; }\n    \n    public void ToClipboard()\n    {\n        DataFormats.Format format = DataFormats.GetFormat(ClipboardDataFormat.USERDEFINED);\n\n        IDataObject dataObj = new DataObject();\n        dataObj.SetData(format.Name, false, this);\n        Clipboard.SetDataObject(dataObj, false);\n    }\n}\n```      \n\n* **Clipboard获取多媒体**     \n\n```      \npublic static object GetDataFromClipboardByType(string type)\n    {\n        object retObj = null;\n        try\n        {\n            if (type == ClipboardDataFormat.TEXT)\n            {\n                retObj = Clipboard.GetText();\n            }\n            if (type == ClipboardDataFormat.FILEDROP)\n            {\n                retObj = Clipboard.GetFileDropList();\n            }\n            if (type == ClipboardDataFormat.IMAGE)\n            {\n                retObj = Clipboard.GetImage();\n            }\n            if (type == ClipboardDataFormat.AUDIO)\n            {\n                retObj = Clipboard.GetAudioStream();\n            }\n            if (type == ClipboardDataFormat.USERDEFINED)\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                retObj = (MyItem)iData.GetData(type);\n            }                \n        }\n        catch (Exception)\n        {\n            retObj = null;\n        }\n        return retObj;\n    }\n\n    public static string GetDataTypeFromClipboard()\n    {\n        string type = string.Empty;\n\n        try\n        {\n            if (Clipboard.ContainsText())\n            {\n                type = ClipboardDataFormat.TEXT;\n            }\n            else if (Clipboard.ContainsFileDropList())\n            {\n                type = ClipboardDataFormat.FILEDROP;\n            }\n            else if (Clipboard.ContainsImage())\n            {\n                type = ClipboardDataFormat.IMAGE;\n            }\n            else if (Clipboard.ContainsAudio())\n            {\n                type = ClipboardDataFormat.AUDIO;\n            }\n            else\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                if (iData.GetDataPresent(ClipboardDataFormat.USERDEFINED))\n                {\n                    type = ClipboardDataFormat.USERDEFINED;\n                } \n            }\n        }\n        catch (Exception)\n        {\n        }\n        return type;\n    }\n}\n```     \n\n# **让窗体自动响应Clipboard的变化**   \n\n让窗体自动响应Clipboard的变化这是一个非常酷的功能，实现这个需求并不难，大致分四步：   \n\n* **Form类中引入三个函数**     \n\n```      \n// SetClipboardViewer 用于往观察链中添加一个窗口句柄，这个窗口就可成为观察链中的一员了，返回值指向下一个观察者\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern IntPtr SetClipboardViewer(IntPtr hwnd);\n\n//ChangeClipboardChain删除由hwnd指定的观察链成员，这是一个窗口句柄，第二个参数hWndNext是观察链中下一个窗口的句柄\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern IntPtr ChangeClipboardChain(IntPtr hwnd,IntPtr hWndNext);\n\n//SendMessage 发送消息\n[System.Runtime.InteropServices.DllImport(\"user32\")]\nprivate static extern int SendMessage(IntPtr hwnd,int wMsg,IntPtr wParam,IntPtr lParam);\n\n//Clipboard内容变化消息\nconst int WM_DRAWCLIPBOARD = 0x308;\n//Clipboard观察链变化消息\nconst int WM_CHANGECBCHAIN = 0x30D;\n```     \n\n* **Form_Load中把窗口添加到观察链中成为观察者，并保存下一个观察者的句柄**     \n\n```     \n//存放观察链中下一个窗口句柄   \nIntPtr NextClipHwnd;\nprivate void Form_Load(object sender, System.EventArgs e)\n{  \n     //获得观察链中下一个窗口句柄\n    NextClipHwnd=SetClipboardViewer(this.Handle);           \n}\n```     \n\n* **重载WndProc方法，监视剪切板，并处理，并把剪切板变化的消息发送给下一个观察者**     \n\n```      \nprotected override void WndProc(ref System.Windows.Forms.Message m)\n{\n    switch(m.Msg)\n    {\n        case WM_DRAWCLIPBOARD:\n            //将WM_DRAWCLIPBOARD消息传递到下一个观察链中的窗口\n            SendMessage(NextClipHwnd,m.Msg,m.WParam,m.LParam);\n\n            //获取Clipboard内容，并处理\n            IDataObject iData = Clipboard.GetDataObject();\n            ...\n            ...\n            break;\n        default:\n            base.WndProc(ref m);\n            break;\n    }       \n}\n```     \n\n* **Form_Closed中撤消自己定义的观察者，并通知下一个观察者**      \n\n```     \nprivate void Form_Closed(object sender, System.EventArgs e)\n{\n    //从观察链中删除本观察窗口\n    ChangeClipboardChain(this.Handle,NextClipHwnd);\n    //将变动消息WM_CHANGECBCHAIN消息传递到下一个观察链中的窗口\n    SendMessage(NextClipHwnd,WM_CHANGECBCHAIN,this.Handle,NextClipHwnd);  \n}\n```       \n\n# **解决Clipboard冲突**   \n* 待补充       \n\n# **[[Demo](https://github.com/xiong-ang/CShape_SLN)]**   \n* **界面**   \n![Alt text](https://github.com/xiong-ang/CShape_SLN/blob/master/Image/ClipBoard.PNG?raw=true)     \n\n* **功能**   \n自动捕捉剪切板变化，并显示其中的文字、图片、文件以及自定义类型。","slug":"clipboard","published":1,"updated":"2017-11-05T04:25:39.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja6a3v4k000otkuior0rz0he","content":"<h1 id=\"Clipboard引荐\"><a href=\"#Clipboard引荐\" class=\"headerlink\" title=\"Clipboard引荐\"></a><strong>Clipboard引荐</strong></h1><blockquote>\n<p>Clipboard，即剪切板，当我们同时按动Ctrl＋C时，选定的对象就被存放在了剪切板中了。如果刚才选定的对象是文件，那么在定盘符后，按动Ctrl＋V键或者点击菜单“粘贴”，这时选定的文件就保存到指定的磁盘上面了；如果选定的对象是图象，那么在打开“画图”之后，按动Ctrl＋V键或者点击菜单“粘贴”，图象就会显示在画图中了；如果是文本，那么在打开文本编辑器后，按动Ctrl＋V键或者点击菜单“粘贴”，这时文本就会显示在文本编辑器中。当然选定的对象还有许多种，这就不一一举例了。上面这些操作其实就是剪切板几种典型的操作。那么这些操作如果用Visual C＃来实现到底是个什么样子？<br>微软引入<strong>Clipboard类</strong>进行处理，我们先来介绍<a href=\"https://msdn.microsoft.com/zh-cn/library/system.windows.forms.clipboard.aspx\" target=\"_blank\" rel=\"external\">MSDN</a>上的一个例子进入今天的讨论。   </p>\n</blockquote>\n<pre><code>/*\n下述代码放置文本数据进入Clipboard，并从中在提取出来。\nWinfrm代码界面元素包括：button1, button2, textBox1, textBox2\n*/\n\nprivate void button1_Click(object sender, System.EventArgs e) {\n    //button1_Click 调用SetDataObject将textBox1中选中的文字放入系统剪切板\n\n    if(textBox1.SelectedText != &quot;&quot;)\n       Clipboard.SetDataObject(textBox1.SelectedText);\n    else\n       textBox2.Text = &quot;No text selected in textBox1&quot;;\n }\n\n private void button2_Click(object sender, System.EventArgs e) {\n    //button2_Click 调用GetDataObject从系统剪切板提取数据\n\n    IDataObject iData = Clipboard.GetDataObject();\n\n    //判断是否有Text数据格式\n    if(iData.GetDataPresent(DataFormats.Text)) {\n       textBox2.Text = (String)iData.GetData(DataFormats.Text); \n    }\n    else {\n       textBox2.Text = &quot;Could not retrieve data off the clipboard.&quot;;\n    }\n }\n</code></pre><p>从这个例子可以学到Clipboard的最基本用法：用SetDataObjec将数据存入系统剪切板；用GetDataObject从系统剪切板获取数据。  </p>\n<h1 id=\"使用Clipboard保存-获取各种媒体\"><a href=\"#使用Clipboard保存-获取各种媒体\" class=\"headerlink\" title=\"使用Clipboard保存/获取各种媒体\"></a><strong>使用Clipboard保存/获取各种媒体</strong></h1><p>以实际操作的经验，剪切板不仅可以拷贝文字，还可以拷贝图片、文件，当然，通过程序，还可以让Clipboard保存音频和自定义类型。下面针对这些功能分别加以介绍。  </p>\n<ul>\n<li><strong>Clipboard保存多媒体</strong>      </li>\n</ul>\n<pre><code>class ClipboardDataFormat\n{\n    public static readonly string TEXT=&quot;Text&quot;;\n    public static readonly string IMAGE=&quot;Image&quot;;\n    public static readonly string FILEDROP=&quot;FileDrop&quot;;\n    public static readonly string AUDIO=&quot;Audio&quot;;\n    public static readonly string USERDEFINED=&quot;UserDefined&quot;;\n}\n\nclass ClipboardProcesser\n{\n    public static void SetDataToClipboard(object o, string type)\n    {\n        try\n        {\n            if (o != null)\n            {\n                if (type == ClipboardDataFormat.TEXT)\n                {\n                    Clipboard.SetText((string)o);\n                }\n                if (type == ClipboardDataFormat.FILEDROP)\n                {\n                    Clipboard.SetFileDropList((System.Collections.Specialized.StringCollection)o);\n                }\n                if (type == ClipboardDataFormat.IMAGE)\n                {\n                    Clipboard.SetImage((System.Drawing.Image)o);\n                }\n                if (type == ClipboardDataFormat.AUDIO)\n                {\n                    Clipboard.SetAudio((Stream)o);\n                }\n                if (type == ClipboardDataFormat.USERDEFINED)\n                {\n                    MyItem item = (MyItem)o;\n                    item.ToClipboard();\n                }\n            }\n        }\n        catch (Exception)\n        {\n        }\n    }\n</code></pre><pre><code>//自定义要往剪切板添加的类型\n[Serializable]\npublic class MyItem\n{\n    public string ItemName { get; set; }\n    public object ItemData { get; set; }\n\n    public void ToClipboard()\n    {\n        DataFormats.Format format = DataFormats.GetFormat(ClipboardDataFormat.USERDEFINED);\n\n        IDataObject dataObj = new DataObject();\n        dataObj.SetData(format.Name, false, this);\n        Clipboard.SetDataObject(dataObj, false);\n    }\n}\n</code></pre><ul>\n<li><strong>Clipboard获取多媒体</strong>     </li>\n</ul>\n<pre><code>public static object GetDataFromClipboardByType(string type)\n    {\n        object retObj = null;\n        try\n        {\n            if (type == ClipboardDataFormat.TEXT)\n            {\n                retObj = Clipboard.GetText();\n            }\n            if (type == ClipboardDataFormat.FILEDROP)\n            {\n                retObj = Clipboard.GetFileDropList();\n            }\n            if (type == ClipboardDataFormat.IMAGE)\n            {\n                retObj = Clipboard.GetImage();\n            }\n            if (type == ClipboardDataFormat.AUDIO)\n            {\n                retObj = Clipboard.GetAudioStream();\n            }\n            if (type == ClipboardDataFormat.USERDEFINED)\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                retObj = (MyItem)iData.GetData(type);\n            }                \n        }\n        catch (Exception)\n        {\n            retObj = null;\n        }\n        return retObj;\n    }\n\n    public static string GetDataTypeFromClipboard()\n    {\n        string type = string.Empty;\n\n        try\n        {\n            if (Clipboard.ContainsText())\n            {\n                type = ClipboardDataFormat.TEXT;\n            }\n            else if (Clipboard.ContainsFileDropList())\n            {\n                type = ClipboardDataFormat.FILEDROP;\n            }\n            else if (Clipboard.ContainsImage())\n            {\n                type = ClipboardDataFormat.IMAGE;\n            }\n            else if (Clipboard.ContainsAudio())\n            {\n                type = ClipboardDataFormat.AUDIO;\n            }\n            else\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                if (iData.GetDataPresent(ClipboardDataFormat.USERDEFINED))\n                {\n                    type = ClipboardDataFormat.USERDEFINED;\n                } \n            }\n        }\n        catch (Exception)\n        {\n        }\n        return type;\n    }\n}\n</code></pre><h1 id=\"让窗体自动响应Clipboard的变化\"><a href=\"#让窗体自动响应Clipboard的变化\" class=\"headerlink\" title=\"让窗体自动响应Clipboard的变化\"></a><strong>让窗体自动响应Clipboard的变化</strong></h1><p>让窗体自动响应Clipboard的变化这是一个非常酷的功能，实现这个需求并不难，大致分四步：   </p>\n<ul>\n<li><strong>Form类中引入三个函数</strong>     </li>\n</ul>\n<pre><code>// SetClipboardViewer 用于往观察链中添加一个窗口句柄，这个窗口就可成为观察链中的一员了，返回值指向下一个观察者\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern IntPtr SetClipboardViewer(IntPtr hwnd);\n\n//ChangeClipboardChain删除由hwnd指定的观察链成员，这是一个窗口句柄，第二个参数hWndNext是观察链中下一个窗口的句柄\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern IntPtr ChangeClipboardChain(IntPtr hwnd,IntPtr hWndNext);\n\n//SendMessage 发送消息\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern int SendMessage(IntPtr hwnd,int wMsg,IntPtr wParam,IntPtr lParam);\n\n//Clipboard内容变化消息\nconst int WM_DRAWCLIPBOARD = 0x308;\n//Clipboard观察链变化消息\nconst int WM_CHANGECBCHAIN = 0x30D;\n</code></pre><ul>\n<li><strong>Form_Load中把窗口添加到观察链中成为观察者，并保存下一个观察者的句柄</strong>     </li>\n</ul>\n<pre><code>//存放观察链中下一个窗口句柄   \nIntPtr NextClipHwnd;\nprivate void Form_Load(object sender, System.EventArgs e)\n{  \n     //获得观察链中下一个窗口句柄\n    NextClipHwnd=SetClipboardViewer(this.Handle);           \n}\n</code></pre><ul>\n<li><strong>重载WndProc方法，监视剪切板，并处理，并把剪切板变化的消息发送给下一个观察者</strong>     </li>\n</ul>\n<pre><code>protected override void WndProc(ref System.Windows.Forms.Message m)\n{\n    switch(m.Msg)\n    {\n        case WM_DRAWCLIPBOARD:\n            //将WM_DRAWCLIPBOARD消息传递到下一个观察链中的窗口\n            SendMessage(NextClipHwnd,m.Msg,m.WParam,m.LParam);\n\n            //获取Clipboard内容，并处理\n            IDataObject iData = Clipboard.GetDataObject();\n            ...\n            ...\n            break;\n        default:\n            base.WndProc(ref m);\n            break;\n    }       \n}\n</code></pre><ul>\n<li><strong>Form_Closed中撤消自己定义的观察者，并通知下一个观察者</strong>      </li>\n</ul>\n<pre><code>private void Form_Closed(object sender, System.EventArgs e)\n{\n    //从观察链中删除本观察窗口\n    ChangeClipboardChain(this.Handle,NextClipHwnd);\n    //将变动消息WM_CHANGECBCHAIN消息传递到下一个观察链中的窗口\n    SendMessage(NextClipHwnd,WM_CHANGECBCHAIN,this.Handle,NextClipHwnd);  \n}\n</code></pre><h1 id=\"解决Clipboard冲突\"><a href=\"#解决Clipboard冲突\" class=\"headerlink\" title=\"解决Clipboard冲突\"></a><strong>解决Clipboard冲突</strong></h1><ul>\n<li>待补充       </li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"[Demo]\"></a><strong>[<a href=\"https://github.com/xiong-ang/CShape_SLN\" target=\"_blank\" rel=\"external\">Demo</a>]</strong></h1><ul>\n<li><p><strong>界面</strong><br><img src=\"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/ClipBoard.PNG?raw=true\" alt=\"Alt text\">     </p>\n</li>\n<li><p><strong>功能</strong><br>自动捕捉剪切板变化，并显示其中的文字、图片、文件以及自定义类型。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Clipboard引荐\"><a href=\"#Clipboard引荐\" class=\"headerlink\" title=\"Clipboard引荐\"></a><strong>Clipboard引荐</strong></h1><blockquote>\n<p>Clipboard，即剪切板，当我们同时按动Ctrl＋C时，选定的对象就被存放在了剪切板中了。如果刚才选定的对象是文件，那么在定盘符后，按动Ctrl＋V键或者点击菜单“粘贴”，这时选定的文件就保存到指定的磁盘上面了；如果选定的对象是图象，那么在打开“画图”之后，按动Ctrl＋V键或者点击菜单“粘贴”，图象就会显示在画图中了；如果是文本，那么在打开文本编辑器后，按动Ctrl＋V键或者点击菜单“粘贴”，这时文本就会显示在文本编辑器中。当然选定的对象还有许多种，这就不一一举例了。上面这些操作其实就是剪切板几种典型的操作。那么这些操作如果用Visual C＃来实现到底是个什么样子？<br>微软引入<strong>Clipboard类</strong>进行处理，我们先来介绍<a href=\"https://msdn.microsoft.com/zh-cn/library/system.windows.forms.clipboard.aspx\" target=\"_blank\" rel=\"external\">MSDN</a>上的一个例子进入今天的讨论。   </p>\n</blockquote>\n<pre><code>/*\n下述代码放置文本数据进入Clipboard，并从中在提取出来。\nWinfrm代码界面元素包括：button1, button2, textBox1, textBox2\n*/\n\nprivate void button1_Click(object sender, System.EventArgs e) {\n    //button1_Click 调用SetDataObject将textBox1中选中的文字放入系统剪切板\n\n    if(textBox1.SelectedText != &quot;&quot;)\n       Clipboard.SetDataObject(textBox1.SelectedText);\n    else\n       textBox2.Text = &quot;No text selected in textBox1&quot;;\n }\n\n private void button2_Click(object sender, System.EventArgs e) {\n    //button2_Click 调用GetDataObject从系统剪切板提取数据\n\n    IDataObject iData = Clipboard.GetDataObject();\n\n    //判断是否有Text数据格式\n    if(iData.GetDataPresent(DataFormats.Text)) {\n       textBox2.Text = (String)iData.GetData(DataFormats.Text); \n    }\n    else {\n       textBox2.Text = &quot;Could not retrieve data off the clipboard.&quot;;\n    }\n }\n</code></pre><p>从这个例子可以学到Clipboard的最基本用法：用SetDataObjec将数据存入系统剪切板；用GetDataObject从系统剪切板获取数据。  </p>\n<h1 id=\"使用Clipboard保存-获取各种媒体\"><a href=\"#使用Clipboard保存-获取各种媒体\" class=\"headerlink\" title=\"使用Clipboard保存/获取各种媒体\"></a><strong>使用Clipboard保存/获取各种媒体</strong></h1><p>以实际操作的经验，剪切板不仅可以拷贝文字，还可以拷贝图片、文件，当然，通过程序，还可以让Clipboard保存音频和自定义类型。下面针对这些功能分别加以介绍。  </p>\n<ul>\n<li><strong>Clipboard保存多媒体</strong>      </li>\n</ul>\n<pre><code>class ClipboardDataFormat\n{\n    public static readonly string TEXT=&quot;Text&quot;;\n    public static readonly string IMAGE=&quot;Image&quot;;\n    public static readonly string FILEDROP=&quot;FileDrop&quot;;\n    public static readonly string AUDIO=&quot;Audio&quot;;\n    public static readonly string USERDEFINED=&quot;UserDefined&quot;;\n}\n\nclass ClipboardProcesser\n{\n    public static void SetDataToClipboard(object o, string type)\n    {\n        try\n        {\n            if (o != null)\n            {\n                if (type == ClipboardDataFormat.TEXT)\n                {\n                    Clipboard.SetText((string)o);\n                }\n                if (type == ClipboardDataFormat.FILEDROP)\n                {\n                    Clipboard.SetFileDropList((System.Collections.Specialized.StringCollection)o);\n                }\n                if (type == ClipboardDataFormat.IMAGE)\n                {\n                    Clipboard.SetImage((System.Drawing.Image)o);\n                }\n                if (type == ClipboardDataFormat.AUDIO)\n                {\n                    Clipboard.SetAudio((Stream)o);\n                }\n                if (type == ClipboardDataFormat.USERDEFINED)\n                {\n                    MyItem item = (MyItem)o;\n                    item.ToClipboard();\n                }\n            }\n        }\n        catch (Exception)\n        {\n        }\n    }\n</code></pre><pre><code>//自定义要往剪切板添加的类型\n[Serializable]\npublic class MyItem\n{\n    public string ItemName { get; set; }\n    public object ItemData { get; set; }\n\n    public void ToClipboard()\n    {\n        DataFormats.Format format = DataFormats.GetFormat(ClipboardDataFormat.USERDEFINED);\n\n        IDataObject dataObj = new DataObject();\n        dataObj.SetData(format.Name, false, this);\n        Clipboard.SetDataObject(dataObj, false);\n    }\n}\n</code></pre><ul>\n<li><strong>Clipboard获取多媒体</strong>     </li>\n</ul>\n<pre><code>public static object GetDataFromClipboardByType(string type)\n    {\n        object retObj = null;\n        try\n        {\n            if (type == ClipboardDataFormat.TEXT)\n            {\n                retObj = Clipboard.GetText();\n            }\n            if (type == ClipboardDataFormat.FILEDROP)\n            {\n                retObj = Clipboard.GetFileDropList();\n            }\n            if (type == ClipboardDataFormat.IMAGE)\n            {\n                retObj = Clipboard.GetImage();\n            }\n            if (type == ClipboardDataFormat.AUDIO)\n            {\n                retObj = Clipboard.GetAudioStream();\n            }\n            if (type == ClipboardDataFormat.USERDEFINED)\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                retObj = (MyItem)iData.GetData(type);\n            }                \n        }\n        catch (Exception)\n        {\n            retObj = null;\n        }\n        return retObj;\n    }\n\n    public static string GetDataTypeFromClipboard()\n    {\n        string type = string.Empty;\n\n        try\n        {\n            if (Clipboard.ContainsText())\n            {\n                type = ClipboardDataFormat.TEXT;\n            }\n            else if (Clipboard.ContainsFileDropList())\n            {\n                type = ClipboardDataFormat.FILEDROP;\n            }\n            else if (Clipboard.ContainsImage())\n            {\n                type = ClipboardDataFormat.IMAGE;\n            }\n            else if (Clipboard.ContainsAudio())\n            {\n                type = ClipboardDataFormat.AUDIO;\n            }\n            else\n            {\n                IDataObject iData = Clipboard.GetDataObject();\n                if (iData.GetDataPresent(ClipboardDataFormat.USERDEFINED))\n                {\n                    type = ClipboardDataFormat.USERDEFINED;\n                } \n            }\n        }\n        catch (Exception)\n        {\n        }\n        return type;\n    }\n}\n</code></pre><h1 id=\"让窗体自动响应Clipboard的变化\"><a href=\"#让窗体自动响应Clipboard的变化\" class=\"headerlink\" title=\"让窗体自动响应Clipboard的变化\"></a><strong>让窗体自动响应Clipboard的变化</strong></h1><p>让窗体自动响应Clipboard的变化这是一个非常酷的功能，实现这个需求并不难，大致分四步：   </p>\n<ul>\n<li><strong>Form类中引入三个函数</strong>     </li>\n</ul>\n<pre><code>// SetClipboardViewer 用于往观察链中添加一个窗口句柄，这个窗口就可成为观察链中的一员了，返回值指向下一个观察者\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern IntPtr SetClipboardViewer(IntPtr hwnd);\n\n//ChangeClipboardChain删除由hwnd指定的观察链成员，这是一个窗口句柄，第二个参数hWndNext是观察链中下一个窗口的句柄\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern IntPtr ChangeClipboardChain(IntPtr hwnd,IntPtr hWndNext);\n\n//SendMessage 发送消息\n[System.Runtime.InteropServices.DllImport(&quot;user32&quot;)]\nprivate static extern int SendMessage(IntPtr hwnd,int wMsg,IntPtr wParam,IntPtr lParam);\n\n//Clipboard内容变化消息\nconst int WM_DRAWCLIPBOARD = 0x308;\n//Clipboard观察链变化消息\nconst int WM_CHANGECBCHAIN = 0x30D;\n</code></pre><ul>\n<li><strong>Form_Load中把窗口添加到观察链中成为观察者，并保存下一个观察者的句柄</strong>     </li>\n</ul>\n<pre><code>//存放观察链中下一个窗口句柄   \nIntPtr NextClipHwnd;\nprivate void Form_Load(object sender, System.EventArgs e)\n{  \n     //获得观察链中下一个窗口句柄\n    NextClipHwnd=SetClipboardViewer(this.Handle);           \n}\n</code></pre><ul>\n<li><strong>重载WndProc方法，监视剪切板，并处理，并把剪切板变化的消息发送给下一个观察者</strong>     </li>\n</ul>\n<pre><code>protected override void WndProc(ref System.Windows.Forms.Message m)\n{\n    switch(m.Msg)\n    {\n        case WM_DRAWCLIPBOARD:\n            //将WM_DRAWCLIPBOARD消息传递到下一个观察链中的窗口\n            SendMessage(NextClipHwnd,m.Msg,m.WParam,m.LParam);\n\n            //获取Clipboard内容，并处理\n            IDataObject iData = Clipboard.GetDataObject();\n            ...\n            ...\n            break;\n        default:\n            base.WndProc(ref m);\n            break;\n    }       \n}\n</code></pre><ul>\n<li><strong>Form_Closed中撤消自己定义的观察者，并通知下一个观察者</strong>      </li>\n</ul>\n<pre><code>private void Form_Closed(object sender, System.EventArgs e)\n{\n    //从观察链中删除本观察窗口\n    ChangeClipboardChain(this.Handle,NextClipHwnd);\n    //将变动消息WM_CHANGECBCHAIN消息传递到下一个观察链中的窗口\n    SendMessage(NextClipHwnd,WM_CHANGECBCHAIN,this.Handle,NextClipHwnd);  \n}\n</code></pre><h1 id=\"解决Clipboard冲突\"><a href=\"#解决Clipboard冲突\" class=\"headerlink\" title=\"解决Clipboard冲突\"></a><strong>解决Clipboard冲突</strong></h1><ul>\n<li>待补充       </li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"[Demo]\"></a><strong>[<a href=\"https://github.com/xiong-ang/CShape_SLN\" target=\"_blank\" rel=\"external\">Demo</a>]</strong></h1><ul>\n<li><p><strong>界面</strong><br><img src=\"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/ClipBoard.PNG?raw=true\" alt=\"Alt text\">     </p>\n</li>\n<li><p><strong>功能</strong><br>自动捕捉剪切板变化，并显示其中的文字、图片、文件以及自定义类型。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cja6a3v2t0000tkuis97dw9io","category_id":"cja6a3v3d0004tkui12bdejwu","_id":"cja6a3v48000dtkui1j8ndsug"},{"post_id":"cja6a3v350002tkuixq6o47cy","category_id":"cja6a3v3z0009tkui7qfadndv","_id":"cja6a3v4g000ktkuikfue3acp"},{"post_id":"cja6a3v3n0006tkuiyglaws26","category_id":"cja6a3v49000etkui21004da2","_id":"cja6a3v4m000ptkui6nnp9cgr"},{"post_id":"cja6a3v3q0007tkui9cc63u62","category_id":"cja6a3v4h000ltkuii2o1wppp","_id":"cja6a3v4r000vtkuihcdh7jvm"},{"post_id":"cja6a3v4k000otkuior0rz0he","category_id":"cja6a3v49000etkui21004da2","_id":"cja6a3v4s000xtkuimznoc23j"},{"post_id":"cja6a3v42000btkui3m8q4962","category_id":"cja6a3v49000etkui21004da2","_id":"cja6a3v4t000ytkuipx78eh6d"},{"post_id":"cja6a3v4i000ntkuic1nz7jbt","category_id":"cja6a3v4q000utkuikbcl8rwl","_id":"cja6a3v4u0011tkuis3y9x5qi"}],"PostTag":[{"post_id":"cja6a3v2t0000tkuis97dw9io","tag_id":"cja6a3v3j0005tkuimp9m9no6","_id":"cja6a3v4e000htkuigq4jdozr"},{"post_id":"cja6a3v2t0000tkuis97dw9io","tag_id":"cja6a3v41000atkuifuytq47n","_id":"cja6a3v4g000jtkuiygpa34a6"},{"post_id":"cja6a3v350002tkuixq6o47cy","tag_id":"cja6a3v4a000ftkuiay926q09","_id":"cja6a3v4q000stkuiv9pdy3mf"},{"post_id":"cja6a3v350002tkuixq6o47cy","tag_id":"cja6a3v4h000mtkuivym04d33","_id":"cja6a3v4q000ttkuiyw5ea641"},{"post_id":"cja6a3v3n0006tkuiyglaws26","tag_id":"cja6a3v4n000rtkui4qsmyssj","_id":"cja6a3v4t0010tkui5l0wadmh"},{"post_id":"cja6a3v3n0006tkuiyglaws26","tag_id":"cja6a3v4s000wtkuivc4m0dm6","_id":"cja6a3v4u0012tkui9g9p4g1s"},{"post_id":"cja6a3v3q0007tkui9cc63u62","tag_id":"cja6a3v4t000ztkui6qr8ir79","_id":"cja6a3v4u0014tkui3ltouayd"},{"post_id":"cja6a3v42000btkui3m8q4962","tag_id":"cja6a3v4u0013tkuiqdmksbw2","_id":"cja6a3v4x0017tkui897pknxz"},{"post_id":"cja6a3v42000btkui3m8q4962","tag_id":"cja6a3v4s000wtkuivc4m0dm6","_id":"cja6a3v4x0018tkuirsrr0i5e"},{"post_id":"cja6a3v4e000itkuiczw57vac","tag_id":"cja6a3v4w0016tkuii44jtyi5","_id":"cja6a3v4x001atkuifhpmluc4"},{"post_id":"cja6a3v4i000ntkuic1nz7jbt","tag_id":"cja6a3v4x0019tkuieuaxgs9p","_id":"cja6a3v4y001ctkuixi5bybw0"},{"post_id":"cja6a3v4k000otkuior0rz0he","tag_id":"cja6a3v4y001btkui868nhuwq","_id":"cja6a3v4z001etkuiqnlk6h43"},{"post_id":"cja6a3v4k000otkuior0rz0he","tag_id":"cja6a3v4s000wtkuivc4m0dm6","_id":"cja6a3v4z001ftkui0eahsekv"}],"Tag":[{"name":"Code Coverage","_id":"cja6a3v3j0005tkuimp9m9no6"},{"name":"CI","_id":"cja6a3v41000atkuifuytq47n"},{"name":"Design Pattern","_id":"cja6a3v4a000ftkuiay926q09"},{"name":"UML","_id":"cja6a3v4h000mtkuivym04d33"},{"name":"Exception","_id":"cja6a3v4n000rtkui4qsmyssj"},{"name":"C#","_id":"cja6a3v4s000wtkuivc4m0dm6"},{"name":"Linux","_id":"cja6a3v4t000ztkui6qr8ir79"},{"name":"DragDrop","_id":"cja6a3v4u0013tkuiqdmksbw2"},{"name":"goal","_id":"cja6a3v4w0016tkuii44jtyi5"},{"name":"Controller","_id":"cja6a3v4x0019tkuieuaxgs9p"},{"name":"Clipboard","_id":"cja6a3v4y001btkui868nhuwq"}]}}